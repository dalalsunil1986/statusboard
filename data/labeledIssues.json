{"help wanted":[{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"body-parser","number":132,"isPullRequest":false,"url":"https://github.com/expressjs/body-parser/issues/132","state":"OPEN","title":"use non blocking json parser","description":"Is there an option to use a non blocking (streaming?) json parser ?\nThe problem with JSON.parse is that it's blocking the event loop and for big json parsing it can be a problem","createdAt":"2015-10-08T10:00:48Z","updatedAt":"2020-04-09T20:21:21Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"mderazon","avatarUrl":"https://avatars0.githubusercontent.com/u/717076?v=4","url":"https://github.com/mderazon"}},"project":{"name":"expressjs/body-parser","repo":"expressjs/body-parser","repoOwner":"expressjs","repoName":"body-parser","repoBranch":"master","repoDirectory":"/","packageName":"body-parser"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"compression","number":122,"isPullRequest":false,"url":"https://github.com/expressjs/compression/issues/122","state":"OPEN","title":"Support for Node.js 8 native http2","description":"Sorry for opening another issue on this topic (#77, #78), but I'm trying out the new native http2 support in Node.js and compression (1.7.1) fails with:\nTypeError: this._implicitHeader is not a function\n    at Http2ServerResponse.write (node_modules/compression/index.js:84:14)\n\nAs far as I see it, this method isn't part of the public API of http.ServerResponse. Shouldn't compression simply call if (!this.headersSent) this.writeHead(this.statusCode) (in a helper function) instead of depending on undocumented API?","createdAt":"2017-10-12T20:26:35Z","updatedAt":"2020-02-12T11:25:39Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"michael42","avatarUrl":"https://avatars1.githubusercontent.com/u/1732333?v=4","url":"https://github.com/michael42"}},"project":{"name":"expressjs/compression","repo":"expressjs/compression","repoOwner":"expressjs","repoName":"compression","repoBranch":"master","repoDirectory":"/","packageName":"compression"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"express","number":2414,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2414","state":"OPEN","title":"route() should handle 405 Method not allowed","description":"I know this has been discussed in numerous issues here, but not about this specific case.\nIMHO the following code\napp.route('/user/:id').get(oneUser).delete(delUser).put(updateUser);\nshould send 405 Method Not Allowed for a POST request to /user/123.\nI can of course workaround this easily by adding a .all(send405) to all of my route() calls but I couldn't find any variable in req that would expose what methods the route does have (for Allow header).\nI know there are a ton of ways how POST /user/123 could still be defined, but if you do call .route() then it would be IMO reasonable to believe that it is the only way of  defining methods for that one route.\nSo I suggest three alternative ways how I'd like this to be fixed (in the order of preference):\n\nMake it the default behavior to send a correct 405 response if route() does not have that method.\nMake it configurable (per router or something) to automatically send 405 responses.\nExpose configured methods to be self used in all().\n\nThis most likely will raise the question about 'How about when GET returns 404, then POST should also return 404 even though with a different id it should send 405.'\nI kinda agree, and this is why I add first in chain a method:\nvar withUser = function(req, res, next) {\n  fetchUser(req.params.id, function(err, user) {\n    if (err) return next(err);\n    if (!user) return res.status(404).end();\n    req.user = user;\n    next();\n  });\n};\n\nrouter.route('/users/:id').all(withUser).get(sendUser).put(updateUser).delete(deleteUser).all(send405);","createdAt":"2014-10-26T22:13:29Z","updatedAt":"2019-09-19T18:15:07Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"nnarhinen","avatarUrl":"https://avatars0.githubusercontent.com/u/265438?v=4","url":"https://github.com/nnarhinen"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"express","number":2594,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2594","state":"OPEN","title":"WebSocket GET handshake (upgrade) routing","description":"I don't meam an \"integrated WebSocket server\" but the possibility of performing express routing for WebSocket handshake requests.\nNode httpServer emits an \"upgrade\" event for HTTP GET requests including a \"Upgrade\" header. Express may provide a new \"method\" called \"websocket\" for handling them (if the \"Upgrade\" header has value \"websocket\"), so the GET request may be processed as any other HTTP verb:\nvar app = express();\n\napp.websocket('/websocket/:service', function(req, res, next) {\n  [...]\n});\nIn this way, Cookies present in the HTTP request may be checked using express middlewares (for example).","createdAt":"2015-03-14T20:29:24Z","updatedAt":"2017-05-10T05:17:43Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"ibc","avatarUrl":"https://avatars1.githubusercontent.com/u/16191?u=a457f638975fabeb9bda93153457cf0ed4b5e82f&v=4","url":"https://github.com/ibc"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"express","number":2619,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/2619","state":"OPEN","title":"change res.links() to also accept array","description":"","createdAt":"2015-04-15T16:15:47Z","updatedAt":"2017-03-18T13:03:29Z","closedAt":null,"labels":[{"name":"4.x","color":"ededed"},{"name":"help wanted","color":"159818"},{"name":"pr","color":"006b75"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":null},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"morgan","number":102,"isPullRequest":false,"url":"https://github.com/expressjs/morgan/issues/102","state":"OPEN","title":"Size of response with no 'content-length' header","description":"Is it possible for a tag to be added that uses 'content-length' is the type of the data sent is not in chunks and a chunk size indicator when the data is sent in chunks?","createdAt":"2016-04-07T14:33:33Z","updatedAt":"2020-04-14T13:34:24Z","closedAt":null,"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"Nokel81","avatarUrl":"https://avatars2.githubusercontent.com/u/8225332?u=abcd65ee7a7ff43be8d960f7526755955f2571f8&v=4","url":"https://github.com/Nokel81"}},"project":{"name":"expressjs/morgan","repo":"expressjs/morgan","repoOwner":"expressjs","repoName":"morgan","repoBranch":"master","repoDirectory":"/","packageName":"morgan"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"morgan","number":194,"isPullRequest":true,"url":"https://github.com/expressjs/morgan/pull/194","state":"OPEN","title":"Added enableObjectStream option","description":"Background\nI've got a similar use case with the issue raised: #181.\nI am using Morgan for a lot of my projects and I would like to be able to write an Object in a stream instead of just a string.\nReason is that I am using Winston which supports meta-data for reach-er logs. I would like to use morgan and pass an object to Winston - instead of parsing a string.\nChanges\n\nAdded a backwards compatible enableObjectStream in morgan() call.\nDefaults to false\nIt needs a custom format function and a defined stream to work.\nThe only diff is that if the above are true (customFormatFunction && stream && enableObjectStream), we are not concatenating a \\n (newline char), hence morgan can stream an object.\n\nAny improvements/changes are welcome.\nTODO:\n\nUpdate README\nUpdate HISTORY\n\nbut I'd like to get some opinions first ðŸ˜„","createdAt":"2019-05-07T22:24:22Z","updatedAt":"2020-03-19T18:09:36Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"needs docs","color":"e11d21"},{"name":"pr","color":"006b75"}],"assignee":null,"author":{"login":"SnakeA","avatarUrl":"https://avatars3.githubusercontent.com/u/9154354?v=4","url":"https://github.com/SnakeA"}},"project":{"name":"expressjs/morgan","repo":"expressjs/morgan","repoOwner":"expressjs","repoName":"morgan","repoBranch":"master","repoDirectory":"/","packageName":"morgan"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"multer","number":405,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/405","state":"OPEN","title":"Wrong error sometimes for file that's too large?","description":"Having trouble reproducing this, but for a while today I was receiving a confusing error, 'Unexpected field' (a.k.a. LIMIT_UNEXPECTED_FILE). Searching Stack Overflow I found that this error was mostly caused by a mismatch between the \"name\" string in the form and the one in my Express route. But that wasn't it because they were both called \"image.\"\nI tried re-installing the module but still got the same error. Then I switched to a much smaller file and Multer started working again without the \"unexpected field\" error. Then, to test my theory I tried uploading a large file, only this time to receive the correct \"request entity too large\" error.\nAlso I wonder if there has been discussion of providing an easier-to-understand, separate error message like\n\"Error: Multer requires a 'name' attribute that matches the one in the route, but received: 'picField'\"\nSeems like it would save a lot of time for folks...","createdAt":"2016-10-06T10:42:40Z","updatedAt":"2020-01-25T20:34:32Z","closedAt":null,"labels":[{"name":"future","color":"e102d8"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"johngoren","avatarUrl":"https://avatars1.githubusercontent.com/u/748214?u=5bba72aff0b6b92eeba57edba7cf3ed6f8b02a90&v=4","url":"https://github.com/johngoren"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"multer","number":531,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/531","state":"OPEN","title":"Multer is not writing the file directly in the folder","description":"Hello, I am uploading files dynamically (different folders based on need):\n// Configure multer\nlet upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, callback) => {\n      let homefolder = req.body.folder;\n      callback(null, homefolder);\n    },\n    filename: (req, file, callback) => {\n      let filename = req.body.filename;\n      callback(null, filename);\n    }\n  })\n});\n\nrouter.post('/upload', upload.single('file'), ctrlFileUploader.upload);\nThis is working well, the issue I have noticed is that multer doesn't write the file there exactly, it kinda waits for the file to be uploaded completely and then starts writing the file to the folder. Is this normal or I am doing something wrong?","createdAt":"2017-10-05T15:48:24Z","updatedAt":"2020-01-25T21:29:45Z","closedAt":null,"labels":[{"name":"awaiting more info","color":"cc317c"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"msolano00","avatarUrl":"https://avatars3.githubusercontent.com/u/2273023?u=9b3edc33a7a3968473a366d9b1826f9628d96458&v=4","url":"https://github.com/msolano00"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"multer","number":553,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/553","state":"OPEN","title":"Multer crashes when name attribute is absent in multipart","description":"A multipart request without a 'name' attribute will produce an error and result with a crash of multer.\nHere is an example of such a multipart request (every line break is a CRLF).\n\nPOST / HTTP/1.1\nHost: localhost\ncontent-type:multipart/form-data;boundary=abcde\nContent-Length: 69\n--abcde\nContent-Disposition: form-data; nam=\"a\"\ndata\n--abcde-\n\nBusboy will not detect the field name and return\n\nfieldname = undefined\nval  = data\n\nThe crash occurs when multer call the append-field as it will try to access the length property of 'fieldname'.\nHere is the stacktrace:\n\n/home/user/node_modules/append-field/lib/parse-path.js:13\nvar len = key.length\n^\nTypeError: Cannot read property 'length' of undefined\nat parsePath (/home/user/node_modules/append-field/lib/parse-path.js:13:17)\nat appendField (/home/user/node_modules/append-field/index.js:5:15)\nat Busboy. (/home/user/node_modules/multer/lib/make-middleware.js:93:7)\nat Busboy.emit (events.js:159:13)\nat Busboy.emit (/home/user/node_modules/busboy/lib/main.js:38:33)\nat PartStream.onEnd (/home/user/node_modules/busboy/lib/types/multipart.js:261:15)\nat PartStream.emit (events.js:164:20)\nat endReadableNT (_stream_readable.js:1062:12)\nat process._tickCallback (internal/process/next_tick.js:152:19)\n\nIt seems to me that this issue can be fixed by adding a check at line 91  in make-middleware.js. We check that the fieldname is not empty.\nif (!fieldname) return abortWithCode('NO_NAME_ATTRIBUTE')\nThis way, we will return a 500 instead of crashing.","createdAt":"2018-01-30T12:58:43Z","updatedAt":"2020-01-26T04:32:42Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"vwvw","avatarUrl":"https://avatars3.githubusercontent.com/u/11035844?v=4","url":"https://github.com/vwvw"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"multer","number":607,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/607","state":"OPEN","title":"Filesize in mutliple upload returns fieldname instead of filename","description":"that is worth when you want to upload multiple files and one file is above filesize limitation.\nyouÂ´re not able to inform user about that rejected file...\nhttps://github.com/expressjs/multer/blob/master/lib/make-middleware.js#L141 pls, change fieldname to filename, or even better with the file object","createdAt":"2018-06-27T12:20:27Z","updatedAt":"2018-06-29T08:47:54Z","closedAt":null,"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"cKhoff","avatarUrl":"https://avatars2.githubusercontent.com/u/26172612?u=ead6808108cca64f81f72b16a6837049adb3667a&v=4","url":"https://github.com/cKhoff"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"multer","number":846,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/846","state":"OPEN","title":"'preservePath:true' is very unclear","description":"I wanted to fetch the full path of a file that's being uploaded by the user. I have found about the preservePath option, I have enabled it. But the documentation is so unclear, it's very rudimentary to figure out, where to go from here","createdAt":"2020-02-25T17:24:09Z","updatedAt":"2020-02-25T21:45:22Z","closedAt":null,"labels":[{"name":"docs","color":"d4c5f9"},{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"hanani8","avatarUrl":"https://avatars1.githubusercontent.com/u/31515421?u=c47d27c847c0d7d753bcdeccd790e22826914e89&v=4","url":"https://github.com/hanani8"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"serve-index","number":35,"isPullRequest":false,"url":"https://github.com/expressjs/serve-index/issues/35","state":"OPEN","title":"Sort options","description":"Would be great if we could define default sort options like sorting by last modified date.","createdAt":"2015-08-02T12:36:59Z","updatedAt":"2019-05-12T17:21:38Z","closedAt":null,"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"kitzler-walli","avatarUrl":"https://avatars3.githubusercontent.com/u/1926992?v=4","url":"https://github.com/kitzler-walli"}},"project":{"name":"expressjs/serve-index","repo":"expressjs/serve-index","repoOwner":"expressjs","repoName":"serve-index","repoBranch":"master","repoDirectory":"/","packageName":"serve-index"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"serve-index","number":42,"isPullRequest":false,"url":"https://github.com/expressjs/serve-index/issues/42","state":"OPEN","title":"Provide method to add to template locals","description":"Hey, would be great to have req and res added to the arguments passed back through, when using the template as a function.\nrender(locals, function (err, body) {\n        if (err) return next(err);\n\n        var buf = new Buffer(body, 'utf8');\n        res.setHeader('Content-Type', 'text/html; charset=utf-8');\n        res.setHeader('Content-Length', buf.length);\n        res.end(buf);\n      });\n\nSo would look like:\nrender(locals, function (err, body) {\n        if (err) return next(err);\n\n        var buf = new Buffer(body, 'utf8');\n        res.setHeader('Content-Type', 'text/html; charset=utf-8');\n        res.setHeader('Content-Length', buf.length);\n        res.end(buf);\n      },req, res);","createdAt":"2016-01-14T20:04:59Z","updatedAt":"2016-07-06T14:02:41Z","closedAt":null,"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"adrianbrowning","avatarUrl":"https://avatars0.githubusercontent.com/u/2430052?u=0b4f485084d0aa2fa18fadccaae755e48245d26e&v=4","url":"https://github.com/adrianbrowning"}},"project":{"name":"expressjs/serve-index","repo":"expressjs/serve-index","repoOwner":"expressjs","repoName":"serve-index","repoBranch":"master","repoDirectory":"/","packageName":"serve-index"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"serve-static","number":83,"isPullRequest":false,"url":"https://github.com/expressjs/serve-static/issues/83","state":"OPEN","title":"Enable use with memory-fs","description":"I am producing all the files and storing them only in memory, i.e. https://github.com/webpack/memory-fs. I'd like there to be an option to tell serve-static which fs to use.","createdAt":"2017-03-04T16:13:15Z","updatedAt":"2019-02-12T20:27:58Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"gajus","avatarUrl":"https://avatars2.githubusercontent.com/u/973543?u=c4160f94d8f1962249226bcac5d22c120667c69f&v=4","url":"https://github.com/gajus"}},"project":{"name":"expressjs/serve-static","repo":"expressjs/serve-static","repoOwner":"expressjs","repoName":"serve-static","repoBranch":"master","repoDirectory":"/","packageName":"serve-static"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"session","number":322,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/322","state":"OPEN","title":"Request: a getSession method?","description":"I'm working with an application that has other means of communication the do not go through the middleware. I have managed to do a hack job of unsigning cookies on the outside requests, but it would be nice to have a method as part of the middleware to take either a cookie string or a request object and return the session data.\nHope you'll consider the request","createdAt":"2016-06-14T17:00:58Z","updatedAt":"2019-05-07T03:53:03Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"j3gb3rt","avatarUrl":"https://avatars3.githubusercontent.com/u/2816297?v=4","url":"https://github.com/j3gb3rt"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"session","number":349,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/349","state":"OPEN","title":"update Readme to include details on extending Store implementation from store.js","description":"As noted in a comment on #97, developers who want to write a Store implementation either need to:\n\nextend their Store from express-session's store.js, which typically means requiring express-session as a dependency\nimplement their own version of the functionality in store.js, session.js, and cookie.js (or copy the files from express-session)\n\nThis is because express-session requires the following methods on the Store in order to work:\n\nregenerate()\nload()\ncreateSession()\n\nThese are available in store.js, but createSession itself requires both session.js and cookie.js.\nThe documentation should be updated to provide guidance on these facts.","createdAt":"2016-08-30T04:20:03Z","updatedAt":"2017-05-20T12:10:00Z","closedAt":null,"labels":[{"name":"docs","color":"d4c5f9"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"dwhieb","avatarUrl":"https://avatars2.githubusercontent.com/u/5892997?u=e586f453f3e80d0f043a961d12dab6172162107a&v=4","url":"https://github.com/dwhieb"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"expressjs","repo":"session","number":425,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/425","state":"OPEN","title":"Request: Option for refreshing the session ID","description":"Sometimes, there is the need to refresh the session ID without loosing the session data.\nExamples:\n\nRefreshing session ID after authentication (to protect against session fixation attacks)\nhttps://www.owasp.org/index.php/Session_fixation\njaredhanson/passport#192\nManually refreshing session ID before it expires (e.g. if the user wants to keep working after the maximum session lifetime, but we do not want the same session ID to be used)","createdAt":"2017-02-09T14:38:14Z","updatedAt":"2019-08-11T22:15:24Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"gk0us","avatarUrl":"https://avatars3.githubusercontent.com/u/10050315?u=6f229726e280be7f9f6353b8d33cc8a1afd53852&v=4","url":"https://github.com/gk0us"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"jshttp","repo":"negotiator","number":35,"isPullRequest":false,"url":"https://github.com/jshttp/negotiator/issues/35","state":"OPEN","title":"Parameter matching too strict","description":"Suppose I have an Accept header that looks like:\nAccept: application/vnd.api+json; ext=bulk\n\nThe output of new Negotiator(request).mediaType() would be application/vnd.api+json as expected. But when I specify an array of media types:\nvar negotiator = new Negotiator(request);\nnegotiator.mediaType(['application/vnd.api+json']); // returns `undefined`\nnegotiator.mediaType(['application/vnd.api+json; ext=bulk,patch']); // returns `undefined`\nnegotiator.mediaType(['application/vnd.api+json; ext=patch,bulk']); // returns `undefined`\nnegotiator.mediaType(['application/vnd.api+json; ext=bulk; supported-ext=bulk']); // returns `undefined`\nnegotiator.mediaType(['application/vnd.api+json; ext=bulk']); // returns `application/vnd.api+json; ext=bulk`\nWhich is kind of WTF because it only matches the exact parameters and I get the parameters in the media type as well. Is this expected behavior? I can see that it may be useful in extracting parameters but I expect that it should match the media type without the parameters, otherwise permutations of parameters may get huge. Possible dupe of #30.","createdAt":"2015-02-25T09:10:04Z","updatedAt":"2017-05-01T17:33:05Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"investigate","color":"bfdadc"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"daliwali","avatarUrl":"https://avatars2.githubusercontent.com/u/1175095?u=6ca12e199a9c9ca56377fe76536f850825b10fa3&v=4","url":"https://github.com/daliwali"}},"project":{"name":"jshttp/negotiator","repo":"jshttp/negotiator","repoOwner":"jshttp","repoName":"negotiator","repoBranch":"master","repoDirectory":"/","packageName":"negotiator"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"jshttp","repo":"on-finished","number":27,"isPullRequest":false,"url":"https://github.com/jshttp/on-finished/issues/27","state":"OPEN","title":"http2 compat tests","description":"Maybe we should have some tests against http2 compat? Also, I think some optimizations can be performed for the http2 case.","createdAt":"2017-09-13T12:26:37Z","updatedAt":"2017-12-07T18:54:01Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"tests","color":"944008"}],"assignee":null,"author":{"login":"ronag","avatarUrl":"https://avatars3.githubusercontent.com/u/3065230?u=ea6b5e1392b4709d75ef9abbac33c028fa8d70dc&v=4","url":"https://github.com/ronag"}},"project":{"name":"jshttp/on-finished","repo":"jshttp/on-finished","repoOwner":"jshttp","repoName":"on-finished","repoBranch":"master","repoDirectory":"/","packageName":"on-finished"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"cookies","number":101,"isPullRequest":false,"url":"https://github.com/pillarjs/cookies/issues/101","state":"OPEN","title":"Cookie set to '' when pass the value as 0","description":"When I want to record the user visit time in the header, I found the 0 value cannot set to cookie only if we convert it to string type, but other number type value can be saved.\nI create one test to reproduce the issue:\nit('when set value to 0', () => {\n      var cookie = new cookies.Cookie('foo', 0 );\n      assert.equal(cookie.toHeader(), 'foo=0; path=/; httponly')\n }) //this will faile\n\nit('when set value to 1', () => {\n        var cookie = new cookies.Cookie('foo', 1 );\n        assert.equal(cookie.toHeader(), 'foo=1; path=/; httponly')\n}) //this will pass\nAnd I check the source code found this issue happens because of the index.js L:131\n  this.value = value || \"\"\n\nThis will convert the 0 to empty string, so I am woundering is this a bug or not, if not, I think we should notice the user we should always put he String type value.","createdAt":"2018-08-22T03:29:28Z","updatedAt":"2019-10-11T13:24:51Z","closedAt":null,"labels":[{"name":"bug","color":"fc2929"},{"name":"help wanted","color":"159818"}],"assignee":null,"author":{"login":"mrbone","avatarUrl":"https://avatars0.githubusercontent.com/u/2182349?u=2b3e38c77b6061d00f6281150942298a126b80e8&v=4","url":"https://github.com/mrbone"}},"project":{"name":"pillarjs/cookies","repo":"pillarjs/cookies","repoOwner":"pillarjs","repoName":"cookies","repoBranch":"master","repoDirectory":"/","packageName":"cookies"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"cookies","number":70,"isPullRequest":false,"url":"https://github.com/pillarjs/cookies/issues/70","state":"OPEN","title":"Improve tests","description":"The current tests in this module leaves a lot to be desired. They really need to be refactored and all code paths in the module accounted for in tests.","createdAt":"2016-03-01T02:58:22Z","updatedAt":"2016-03-04T04:11:53Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"tests","color":"944008"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"pillarjs/cookies","repo":"pillarjs/cookies","repoOwner":"pillarjs","repoName":"cookies","repoBranch":"master","repoDirectory":"/","packageName":"cookies"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"path-to-regexp","number":142,"isPullRequest":false,"url":"https://github.com/pillarjs/path-to-regexp/issues/142","state":"OPEN","title":"Optional group with param compile","description":"There are some issues: #95, #106 but I'm not sure if that is the same case.\nI want to achieve something like optional group matching based on presence of a parameter and being able to compile path back.\nI'd like to define a path like:\n(/first/:one)?/second\n\nAnd the first segment will be returned only if :one parameter is present:\nconst toPath = pathToRegexp.compile(\"(/first/:one)?/second\");\n\ntoPath(); // returns `/second`\ntoPath({ one : 1 }); // returns `/first/1/second`\nIdeally I'd like to have some nested groups:\nconst toPath = pathToRegexp.compile(\"(/first/:one(/second/:two)?)?/three\");\n\ntoPath(); // returns `/three`\ntoPath({ two : 2 }); // returns `/three` because outer group \"first\" is not matched\ntoPath({ one : 1 }); // returns `/first/1/three`\ntoPath({ one : 1, two: 2 }); // returns `/first/1/second/2/three`\nIs this even possible using this library?","createdAt":"2018-03-06T01:19:57Z","updatedAt":"2019-11-20T04:07:52Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"LKay","avatarUrl":"https://avatars3.githubusercontent.com/u/181078?u=192720c79aa6dddd1fb68690645c434979802186&v=4","url":"https://github.com/LKay"}},"project":{"name":"pillarjs/path-to-regexp","repo":"pillarjs/path-to-regexp","repoOwner":"pillarjs","repoName":"path-to-regexp","repoBranch":"master","repoDirectory":"/","packageName":"path-to-regexp"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"router","number":48,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/48","state":"OPEN","title":"Typescript Typings","description":"Any chance of getting some @types/router typings published? Or are there any floating around that we can make official and publish.","createdAt":"2016-10-14T01:42:24Z","updatedAt":"2019-12-03T04:56:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"help wanted","color":"159818"},{"name":"top priority","color":"1af221"}],"assignee":null,"author":{"login":"origin1tech","avatarUrl":"https://avatars2.githubusercontent.com/u/1781771?v=4","url":"https://github.com/origin1tech"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"router","number":86,"isPullRequest":true,"url":"https://github.com/pillarjs/router/pull/86","state":"OPEN","title":"Store matched routes in request","description":"Lightly rebased version of #34 with the fixes suggested by @wesleytodd.","createdAt":"2020-01-03T03:27:27Z","updatedAt":"2020-04-18T17:43:58Z","closedAt":null,"labels":[{"name":"enhancement","color":"84b6eb"},{"name":"help wanted","color":"159818"},{"name":"needs docs","color":"e11d21"},{"name":"pr","color":"006b75"}],"assignee":null,"author":{"login":"gabegorelick","avatarUrl":"https://avatars0.githubusercontent.com/u/610129?u=2238db4ca5601033a7cc15906f6c8d1933101aef&v=4","url":"https://github.com/gabegorelick"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"help wanted","color":"159818"},"issue":{"owner":"pillarjs","repo":"send","number":86,"isPullRequest":false,"url":"https://github.com/pillarjs/send/issues/86","state":"OPEN","title":"Show symbolic links as redirects","description":"Add an option to show the symbolic links as 301 redirections to the file location instead of return the file content.","createdAt":"2015-12-07T00:16:19Z","updatedAt":"2015-12-08T14:18:47Z","closedAt":null,"labels":[{"name":"help wanted","color":"159818"},{"name":"ideas","color":"d7e102"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"piranna","avatarUrl":"https://avatars1.githubusercontent.com/u/532414?u=70121ad8a9d2af98569ffeaf0268c362c5020c91&v=4","url":"https://github.com/piranna"}},"project":{"name":"pillarjs/send","repo":"pillarjs/send","repoOwner":"pillarjs","repoName":"send","repoBranch":"master","repoDirectory":"/","packageName":"send"}}],"discuss":[{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"body-parser","number":252,"isPullRequest":false,"url":"https://github.com/expressjs/body-parser/issues/252","state":"OPEN","title":"Should URLSearchParams be used in node.js 8 instead of querystring?","description":"Node >= 8.0 introduced an issue in querystring.parse (see here nodejs/node#13773) that will affect all users of body-parser.  It occurs when there is a trailing whitespace in a query string parameter:\nBefore require('querystring').parse('a=%20+&') was { a: ' ' }\nIn node 8.x require('querystring').parse('a=%20+&') is { a: '%20 ' }\nThis applies to any parameter value ending with a space.\nEven though it is not body-parser's fault, this issue can cause non trivial problems that are very hard to track down. By updating any app that uses body-parser on older node versions to node 8.x, any url-encoded form input with a trailing space will start to have the encoding of special characters broken. It took us a long time to discover the issue and to find out where the problem was. In the issue mentioned above, it is suggested that the new URLSearchParams class is a faster way of parsing query strings and more similar to native browser implementations. Does it make sense to consider it?","createdAt":"2017-07-09T22:59:41Z","updatedAt":"2017-07-18T00:40:33Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"jsilveira","avatarUrl":"https://avatars3.githubusercontent.com/u/966787?v=4","url":"https://github.com/jsilveira"}},"project":{"name":"expressjs/body-parser","repo":"expressjs/body-parser","repoOwner":"expressjs","repoName":"body-parser","repoBranch":"master","repoDirectory":"/","packageName":"body-parser"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"body-parser","number":347,"isPullRequest":false,"url":"https://github.com/expressjs/body-parser/issues/347","state":"OPEN","title":"Implement a __proto__ check option","description":"Eran Hammer posted an article on proto poisoning and his solution in joi/hapi: https://hueniverse.com/a-tale-of-prototype-poisoning-2610fa170061\n@rgrove posted a simple implementation of a fix for this: https://gist.github.com/rgrove/3ea9421b3912235e978f55e291f19d5d\nHowever the fix requires a custom reviver that might slow down the default/valid parsing case, Eran prevented this by using an initial check for __proto__. It might be good to add this as a default to be checked for in body-parser in general that can be switched off... if someone wants to do so.","createdAt":"2019-02-08T15:33:48Z","updatedAt":"2019-04-17T23:36:54Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"martinheidegger","avatarUrl":"https://avatars2.githubusercontent.com/u/914122?u=fd7a631021fb7409ba599551a12632817575baad&v=4","url":"https://github.com/martinheidegger"}},"project":{"name":"expressjs/body-parser","repo":"expressjs/body-parser","repoOwner":"expressjs","repoName":"body-parser","repoBranch":"master","repoDirectory":"/","packageName":"body-parser"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"body-parser","number":72,"isPullRequest":false,"url":"https://github.com/expressjs/body-parser/issues/72","state":"OPEN","title":"Consider changing extended: true for urlencoded parser to be W3C JSON forms","description":"Working draft: http://www.w3.org/TR/html-json-forms/\nThoughts from qs: ljharb/qs#63\nThis support may not even be called extended: true within the urlencoded parser; it may move to be an option of the JSON parser.","createdAt":"2014-12-18T02:54:16Z","updatedAt":"2016-05-02T19:11:44Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"future","color":"e102d8"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/body-parser","repo":"expressjs/body-parser","repoOwner":"expressjs","repoName":"body-parser","repoBranch":"master","repoDirectory":"/","packageName":"body-parser"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"body-parser","number":88,"isPullRequest":false,"url":"https://github.com/expressjs/body-parser/issues/88","state":"OPEN","title":"Add multipart/form-data support","description":"This is just such a basic type of the web, it's hard to keep ignoring it. Because of the pattern of this module, though, we really cannot support files. But I don't see why we can support it, but just drop files. Thoughts?","createdAt":"2015-03-29T21:47:28Z","updatedAt":"2020-03-31T01:23:43Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"future","color":"e102d8"},{"name":"ideas","color":"d7e102"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/body-parser","repo":"expressjs/body-parser","repoOwner":"expressjs","repoName":"body-parser","repoBranch":"master","repoDirectory":"/","packageName":"body-parser"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"csurf","number":60,"isPullRequest":false,"url":"https://github.com/expressjs/csurf/issues/60","state":"OPEN","title":"how to handle csurf function not being available on req object when a session store goes down","description":"Wondering your thoughts on this. recently, my redis provider went down for a sec, and sent my app into a downward spiral of death. i've since added in better error handling for when the session isn't available, and also a check to see if first the req.csrfToken() function exists, so the app won't crash. is that pretty much the extent of it?\nif (req.csrfToken) {\n        state.csrf = req.csrfToken();\n      } else {\n        next(new Error('no csrftoken function'));\n      }\nand for sessions:\napp.use(function (req, res, next) {\n    if (!req.session) {\n      return next(new Error('session not defined'));\n    }\n    next();\n  });","createdAt":"2015-03-13T21:06:18Z","updatedAt":"2015-04-08T03:04:08Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"kellyrmilligan","avatarUrl":"https://avatars0.githubusercontent.com/u/2642088?v=4","url":"https://github.com/kellyrmilligan"}},"project":{"name":"expressjs/csurf","repo":"expressjs/csurf","repoOwner":"expressjs","repoName":"csurf","repoBranch":"master","repoDirectory":"/","packageName":"csurf"}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":100,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/100","state":"OPEN","title":"express 5.0.0","description":"the original issue (PR expressjs/express#2237) that tracks this is locked up for probable unmanageable number of discussions and some of which off-topic? I can't find an active issue that tracks this, so opening one.\nI request to release express 5.\n\nhow was the user feedback on 5.0.0-alpha.7? if it is reasonably positive, does it make sense to cut that into 5?\nare there pending items in expressjs/express#2237 (comment) that are real blockers? can they be pushed to in 5.1?\ncan we have a TC meeting to discuss this - challenges, gaps, actionables and owners?\n\nI am not an express commiter, but a staunch fan. I can commit the necessary bandwidth required for upskilling myself and contribute to realize this!","createdAt":"2020-02-23T05:58:52Z","updatedAt":"2020-04-13T05:41:39Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"},{"name":"top priority","color":"1af221"}],"assignee":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"},"author":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":102,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/102","state":"OPEN","title":"[Info] OpenJS Conference & Collab Summit FYIs for Project Communities","description":"Hi ExpressJS Community ðŸ¤—\nI've been asked to help make sure that all the OpenJS Foundation project communities are aware that the deadline for our OpenJS Conference Call for Proposals has been extended through Feb. 28. Previously, this event was called 'Node + JS Interactive' and it leaned heavily toward Node.js. We're hoping to have a wider range of sessions about all the OpenJS Foundation projects, so we'd love to see presentations about Express!\nI also wanted to make sure you're aware of the Collaborator's Summit, an event focused on project maintainers, collaborators & contributors. The goal for the collab summit is to provide opportunities for face-to-face working sessions within a single project or across multiple projects. So if you wanted to get your core team together you could do that, or if you want to have a session for new contributors to your project, or if you wanted to work across multiple OpenJS Foundation projects on issues like accessibility, privacy, security, modules, etc. you could do that too. If you're interested in securing session space at the collab summit, please ping me here, reach out on slack or twitter, or open an issue on the /summit repo.\nThe OpenJS World conference is June 23-24 and Collaborator's Summit is June 25-26 in Austin, TX. These are ticketed events, but members of OpenJS Foundation project communities are eligible for Travel Fund assistance. If you have questions or would like to find out more, please chime in on our /summit repo.\nas always, let me know how I can help <3\nJory Burson\nOpenJS Foundation Community Manager","createdAt":"2020-02-25T15:32:40Z","updatedAt":"2020-04-18T17:25:53Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"jorydotcom","avatarUrl":"https://avatars0.githubusercontent.com/u/1355039?v=4","url":"https://github.com/jorydotcom"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":105,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/105","state":"OPEN","title":"Removing 3rd Party Recommendations from Expressjs.com","description":"Currently on the express site there are a few places which link out to 3rd party sites/blogs, recommend content, list companies that use express, etc.\nAs this project has grown over time, having something listed on the community site is fairly attractive, as an official nod more or less from the project (even though the disclaimer says otherwise). At the very least I'd assume it's a juicy SEO bump if you're writing about Express (I haven't seen any nofollow).\nPart of opening this issue is that I don't know how to fairly review submissions to these parts of the site, or justify their inclusion/exclusion since we have invited folks to submit their PRs.\nThere hasn't been much volume of PR's to add things to these lists lately (not since I started triaging a few months ago at least) but I wanted to start a conversation about these sections.\nFor reference here are some open PRs: expressjs/expressjs.com#1110 expressjs/expressjs.com#1097 expressjs/expressjs.com#1088 expressjs/expressjs.com#1079 expressjs/expressjs.com#968 expressjs/expressjs.com#950\nI've reclaimed the #community contribution label to track these for now (it had 2 resolved issues associated with it prior).\nPrior Discussions\nThe most comprehensive discussion I found about this prior was this conversation around reviewing middleware prior to inclusion.\nThis topic also came up in an issue about dead links (comment from @wesleytodd:\n\nThis is not a judgement on the package, but I would like to see the express documentation have less documentation on third party packages. Today there is a ton of outdated stuff which was added years ago, and I would like to not make it any worse. I think we should consider moving stuff like this into an \"awesome list\" format instead of it being on the express website. Thoughts about this direction @jonchurch?\n\nAlso see this issue with @crandmck and @wesleytodd discussing company logos, specifically wes:\n\n... this is one of the issues I have with showing company logos in the website, so do not take this as personal feedback. BUT, how are we supposed to know you represent this company?\n\nand @crandmck response:\n\n... At this point, I agree we should remove [companies using express] page, for the reasons you cite (maintenance, inability to ascertain authenticity, etc). Are there any arguments for keeping it?\n\nMy Opinion\nPersonally I don't think there's anything wrong with linking out to stable resources when necessary. Ideally, all the relevant content needed to understand Express would be part of the documentation and maintained by the community itself, which I think we are basically at that point already.\nProposal\nI think there are a few parts of the site that can be removed, like companies using express, and open source projects using express.\nOther parts of the site that ask people to open a PR to have their article/project/etc included in a list could have the invitation removed, pending a decision about whether to keep those lists.","createdAt":"2020-02-29T21:44:54Z","updatedAt":"2020-04-04T16:08:57Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"jonchurch","avatarUrl":"https://avatars0.githubusercontent.com/u/12915163?u=5676e00f9b4097423d907c900338a61a5ae6cf56&v=4","url":"https://github.com/jonchurch"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":110,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/110","state":"OPEN","title":"Security Policies","description":"After reading the Snyk Build a Backdoor article I started thinking about what the security policies and measures are in the project.\nI'm curious to learn more about security practices as we are ramping up cadence of releases, merging more PRs, and getting ready to implement Repo Captains. As someone who has started reviewing PRs and committing to the project, I want to make sure I know how I can help keep the project and ecosystem safe.\nBased on some quick searching through the main express repo and this one, I found a few things which I believe are part of the Express security model:\n\nLimited commit bits/publish rights - Few people can publish or merge, mostly TC members I think\n2FA for committers and publishers - I don't actually know if/where this is stated, but I think that was a pre-req?\nExternal dependency versions are pinned - To limit incidents based on permissive dep resolution (drawn from wes' comment)\nSecurity Policy doc - Outlines the security disclosure policy\n\nThis is a topic that I personally am not well versed in, and I know we have some very smart people in this project and the Node.js project as well who care about Express and it's impact on the ecosystem.\nThis issue is meant as a means to facilitate discussion about what we currently do and what we would like to do in the future.","createdAt":"2020-03-20T20:06:04Z","updatedAt":"2020-03-30T19:13:38Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"jonchurch","avatarUrl":"https://avatars0.githubusercontent.com/u/12915163?u=5676e00f9b4097423d907c900338a61a5ae6cf56&v=4","url":"https://github.com/jonchurch"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":117,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/117","state":"OPEN","title":"how companies could help support express","description":"forking a new issue out of #115 (comment)\n/cc @Sushmeet","createdAt":"2020-04-09T01:25:57Z","updatedAt":"2020-04-09T15:55:17Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":118,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/118","state":"OPEN","title":"Proposing Triage Team Meetings ( additional, supplementary to TC )","description":"Originally when I sat opposite of @wesleytodd at the collaborators summit and asked him what success was going to look like as we tried to recruit triage members he replied \"If I could find one\".\nWe now have a good team of triage members and the outreach that started at that conference is paying dividends. We must not get casual and will still need to keep recruiting as  @gireeshpunathil mentions here.\nWe are now a large enough group that triage discussions may need a space. Every TC meeting runs over by on average 30 minutes.\nIt has been proposed that we set another meeting space up ( an additional space ) for those triage discussions.\nI would like to solicit opinions on\n\nwhether we think this is a good idea\nthe frequency & time of the proposed meetings\nthe length of the proposed meetings\n\nI would also like to suggest that we have a rigid structure insomuch as we stick to the duration allocated in those meetings.\nWe are an international triage team and there is no good time for everyone. Just reasonable times.\nGiven the current situations that most of find ourselves in ( all working from home ) we may have more flexibility at the moment than in the future. So If we start on a certain cadence we will accept future changes to any date and frequency these proposed meetings have.","createdAt":"2020-04-09T15:54:48Z","updatedAt":"2020-04-12T14:30:54Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"ghinks","avatarUrl":"https://avatars3.githubusercontent.com/u/5049078?u=ab5f75c4816a0be435a79ab3e7985e3b148ba7ce&v=4","url":"https://github.com/ghinks"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":52,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/52","state":"OPEN","title":"Open Collective for Express","description":"I propose we create an open collective for Express and have it linked on expressjs.com.\n@expressjs/express-tc","createdAt":"2017-02-22T04:55:10Z","updatedAt":"2017-02-22T21:02:58Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"hacksparrow","avatarUrl":"https://avatars1.githubusercontent.com/u/950112?u=80c4c544542a9cfa6fedaa81104f2e69daba42da&v=4","url":"https://github.com/hacksparrow"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":92,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/92","state":"OPEN","title":"express triage","description":"team -\nI plan to spend some time helping with express triage, along with my colleague, @HarshithaKP\nI had a meeting with @wesleytodd in August, and here is what that roughly came out:\nWe define a triage process and document it. The triage process is as follows:\n\ntag all the open issues as: needs triage, bug or enhancement, based on the qualifying criteria that we apply after the due analysis on the issue\nDocument the process under https://github.com/expressjs/express/blob/master/Contributing.md for wider awareness so that no one (in the package maintenance team) is caught by surprise.\n\nPlease let me know what do you think!\n\nthe scope for this initiative is all the repos under express umbrella\nwe also entreat more people to join the triage team to reduce the backlog and improve our responsiveness to end-user issues\nwe have started looking at multer as a starting point (based on backlog count), and touched some issues. Would be good if some of the owners or  maintainers to have a look at those and share their candid opinions - we are not SMEs and not fully skilled in the technology (but definitely striving to ramp up!) so this feedback is important to make course corrections as we go!\n\nThanks in advance!","createdAt":"2019-09-16T04:10:23Z","updatedAt":"2020-02-14T03:42:35Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"},"author":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":94,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/94","state":"OPEN","title":"Express YouTube Channel","description":"nodejs/package-maintenance#284 (comment)\n\nSo I can move it to another Google Account, and seems like everything will stay intact. Is there like a general org account to move it in to or should we make a brand new Google Account just for this (and if so, how should we manage the 2FA on it)?\n\nI don't have a strong opinion on how we manage this, but it seems to me that if we want to share it so that other can run the meetings in @dougwilson's absence then it should probably be under a new account just for this.  What are everyone else's thoughts?\nIf so, should we use a lastpass to share the credential like the OpenJSF did for the zoom credential?","createdAt":"2019-12-03T03:18:41Z","updatedAt":"2020-04-15T22:33:43Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"1d76db"},"issue":{"owner":"expressjs","repo":"discussions","number":98,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/98","state":"OPEN","title":"Document and make official repo captains","description":"I think we need dedicated captains for some modules.  We already have this in practice with @LinusU and multer and @blakeembrey with path-to-regexp.  But all of the rest fall back to @dougwilson.   I think this would load balance a bit better, and would empower people to really push those forward if we had others on some of the more important once.  I see no reason why it should not be multiple people for each in the future, but for now we just need a better clear guideline on how to \"own\" a repo and what the expectations are.  I think we need to document it and make it official as the process for the TC.\nOn a tactical note, there are some important and high priority things I would like to finish in generator and router and I would feel much more empowered to do them if I had some officially recognized capacity to do so (and obviously publish rights).  If I feel this way, I am sure that many others who might step up their contribution game also would.  I think this would also be one way to start opening up the publish rights across the org without getting too crazy.\nHere is my proposed addition to the contribution guide or new charter document:\n### Project Captains\n\nThe Express TC can designate captains for individual projects/repos in the\nthree organizations. These captains are responsible for being the primary\nday-to-day maintainers of the repo on a technical and community front.\nThey will ensure that decisions which effect the Express project at large are\nbrought up with the TC (in meeting or over GitHub issues) but otherwise will\nhave the full authority in the direction of the individual project.  These captains\nwill be given full permissions on both the repo as well as the npm packages, and\nwill follow the community guidelines for publishing and maintaining support.\n\nTo become a captain for a project you will be expected to participate in that\nproject for at least 6 months prior to the request.  You should have helped with\ncode contributions as well as triaging issues.  You are also required to have 2FA\nenabled on both your GitHub and npm accounts. When you want to request the\ncaptain role, submit a PR to this doc with the project and your GitHub handle.  The\nPR will require at least 2 approvals from TC members and 2 weeks hold time to\nallow for dissent.  When the PR is merged, a TC member will add you to the proper\nGitHub groups, as well as grant you npm publish rights.  \n\n#### Current Project Captains\n\n- `path-to-regexp`: @blakeembrey\n- `multer`: @LinusU \n- `expressjs.com`: @crandmck \n- `generator`: @wesleytodd \n- `router`: @dougwilson & @wesleytodd \nObviously @dougwilson is the defacto captain for everything else, so I am not sure if it is worth saying that explicitly.  Maybe we could just say \"the TC is in charge if no one is explicitly listed below\"?\nThoughts on this? If we like it I can do one of three things:\n\nadd it to the charter.md document PR\nopen a new PR against the new charter.md\nopen a new PR with it to the contributing.md","createdAt":"2020-01-01T14:18:22Z","updatedAt":"2020-03-18T23:40:45Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"}],"assignee":null,"author":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2422,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/2422","state":"OPEN","title":"Optional custom json replacer/spaces per response","description":"In some cases it is useful to be able to overwrite the json replacer at response level, in the end it is something related to the response.\nThis change also makes it possible to simply say: res.jsonReplacer = null; res.json(data); to prevent the jsonReplacer from kicking in.","createdAt":"2014-10-29T15:43:11Z","updatedAt":"2019-12-12T16:34:00Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"},{"name":"pr","color":"006b75"}],"assignee":null,"author":{"login":"rubenstolk","avatarUrl":"https://avatars2.githubusercontent.com/u/692644?v=4","url":"https://github.com/rubenstolk"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2449,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2449","state":"OPEN","title":"Remove express.static","description":"I haven't seen much discussion to if we are actually going to remove static from express@5.\n(People can always still require serve-static.)\nBasically it doesn't make much sense to have these things in express core, imo.\nWe'll build a better CLI generator for people who want this stuff easy.","createdAt":"2014-11-22T01:54:01Z","updatedAt":"2015-12-09T19:38:19Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"discuss","color":"02d7e1"},{"name":"future","color":"e102d8"}],"assignee":null,"author":{"login":"Fishrock123","avatarUrl":"https://avatars1.githubusercontent.com/u/1093990?u=3c6722495082f714ddfa170f7fe23b0d3b73168c&v=4","url":"https://github.com/Fishrock123"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2474,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2474","state":"OPEN","title":"Feature request: Add a custom event `render` (due `req.route` & routing middleware nature)","description":"Related links\n#2093\nhttp://stackoverflow.com/a/19460598/881286\nA practical and real application of req.route would be one that you have\n\na dynamic route like /user/:id\na navbar and want to activate an item depending on the route (adding a CSS class),\n\nAt the view, it would be nice to do a conditional on a route definition instead of the actual url path.\nTo acomplish that right now it is needed to add a local variable in each route middleware definition, whis is a cumbersome task:\n    router.route('/users/:id').get(function (req, res) {\n      res.locals.route = req.route;\n      res.render('users', {});\n    });\nReal deal\nA nice way to overcome this would be having a general middleware that do it in a single place, but the issue is that req.route only gets filled when the routing middleware gets executed, so there is no way to code a separated middleware that gets executed AFTER req.route is defined and BEFORE the render method.\nConclusion\nIf an Expressjs custom event existed, that gets executed just after the render method gets executed, it could be used to overcome this issue:\napp.use(function (req, res, next) {\n    res.on('render', function(){\n         res.locals.route = req.route;\n    });\n    next();\n});\nThanks","createdAt":"2014-12-17T19:50:21Z","updatedAt":"2016-03-18T19:43:42Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"diosney","avatarUrl":"https://avatars2.githubusercontent.com/u/1340074?u=58dfe206b651bb4448bc5e2f053c06547d52f5c0&v=4","url":"https://github.com/diosney"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2501,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2501","state":"OPEN","title":"Add originalRoute like originalUrl","description":"In a request we can get the originalUrl, which is the complete URL for the request after it has travelled through nested routes.\nBut I think an originalRoute would be at least as usefull, especially for request logging.\nI don't think it should be that difficult to add.\nCurrently I've made a simple hack to accomplish this, but I rather see it built-in.\nvar _ = require('lodash');\nvar express = require('express');\nvar Router = express.Router;\nvar Router_process_params = Router.process_params;\n\nRouter.process_params = function (layer, called, req, res, done) {\n  req.originalRoute = (req.originalRoute || '') + (req.route && req.route.path || layer.path ||Â '');\n  return Router_process_params.apply(this, _.toArray(arguments));\n}","createdAt":"2015-01-16T11:37:13Z","updatedAt":"2019-07-24T18:45:25Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"module:router","color":"bfe5bf"}],"assignee":null,"author":{"login":"danieljuhl","avatarUrl":"https://avatars0.githubusercontent.com/u/2785418?v=4","url":"https://github.com/danieljuhl"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2511,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2511","state":"OPEN","title":"Reject routes containing an unescaped space character","description":"At the moment, when the developer provides a route path containing raw characters that must escaped by HTTP clients, for example a space character, the route is registered by express even though it will never match any request (URL):\nvar app = express();\napp.get('/foo bar', function(req, res) { /* ... */ });\n\n// clients send `GET /foo%20bar`, server responds with 404\nSuch situation is difficult to troubleshoot, especially if the invalid character was included by mistake.\nI am proposing to modify Express and/or path-to-regexp to print a warning when a string path argument contains characters that will be always sent in the encoded form by HTTP clients. RFC3986 allows some characters to be sent either encoded or unencoded. Such characters should be accepted as valid (no error/warning).\nIn other words, only the following characters may be present in the unencoded form:\n\nUnreserved characters: ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nReserved characters: \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\" / \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n@dougwilson thoughts? StrongLoop can contribute the change, I just want to check with you that such change will be accepted.\nI was initially thinking that express should throw an error instead of printing a warning, but since such change may be considered as breaking backwards compatibility, it's probably better to stay with the warning.\n/cc @PradnyaBaviskar","createdAt":"2015-01-23T06:50:52Z","updatedAt":"2016-02-16T16:32:15Z","closedAt":null,"labels":[{"name":"4.x","color":"ededed"},{"name":"5.x","color":"ededed"},{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"},{"name":"module:router","color":"bfe5bf"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"bajtos","avatarUrl":"https://avatars1.githubusercontent.com/u/1140553?v=4","url":"https://github.com/bajtos"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2524,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2524","state":"OPEN","title":"Add \"set\" Method to \"Router\"","description":"Hey guys,\nI think it would be nice to be able to set options to single Routes. For example one can set a default layout for the handlebars rendering engine with\napp.set('view options', { layout: 'main' });\nor with\napp.engine(\".hbs\", handlebars({\n    defaultLayout: \"main\", \n}));\nWhen using a express.Router() for example with app.use(\"/admin\", adminRouter) it would be nice to be able to use something like\nadminRouter.set('view options', { layout: 'adminMain' });\nto prevent using\nres.render('home', {layout: \"adminMain\"});\nfor every call to res.render\nThanks\n-AndrÃ©-","createdAt":"2015-02-02T12:00:04Z","updatedAt":"2016-02-19T20:11:00Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"},{"name":"module:router","color":"bfe5bf"}],"assignee":null,"author":{"login":"akesser","avatarUrl":"https://avatars3.githubusercontent.com/u/10295987?v=4","url":"https://github.com/akesser"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2526,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2526","state":"OPEN","title":"path specific error handler not called","description":"The following test passes on 3.x but fails to master.  I can't find anything in the migration guide mentioning something like this - is it an intended change I'll need to work around or a regression?\nvar express = require('../')\n  , request = require('supertest');\n\ndescribe('app', function(){\n  describe('.VERB()', function(){\n    it('should call an error handling routing callback when path matches', function(done){\n      var app = express();\n\n      app.all('*', function (req, res, next) {\n        next(new Error('fabricated error'));\n      });\n\n      app.get('/', function(err, req, res, next){\n        next();\n      }, function(req, res){\n        res.send(204);\n      });\n\n      request(app)\n      .get('/')\n      .expect(204, done);\n    })\n  })\n})\nmaster gives this error:\n  1) app .VERB() should call an error handling routing callback when path matches:\n     Error: expected 204 \"No Content\", got 500 \"Internal Server Error\"","createdAt":"2015-02-02T16:54:28Z","updatedAt":"2018-05-18T13:30:45Z","closedAt":null,"labels":[{"name":"4.x","color":"ededed"},{"name":"discuss","color":"02d7e1"},{"name":"module:router","color":"bfe5bf"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"therigu","avatarUrl":"https://avatars3.githubusercontent.com/u/179094?v=4","url":"https://github.com/therigu"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2552,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2552","state":"OPEN","title":"Fix setting inheritance","description":"Looking for feedback on this, but a recent issue was brought up with \"trust proxy\" and got me reading through a bunch of old issues on here.\nPersonally I like having apps as isolated islands, but sometimes it's nice/makes sense to inherit some settings from the parent app when using sub apps. There was a suggestion back in #905 (comment) to add \"inherit ___\" settings where you would pick and choose settings to inherit. This seems kludgy to me, but I guess works?\nReally, right now the way mounted sub apps work with settings is half-assed :) They pretend like they will inherit settings, unless they are special magical default Express settings. You can't have it both ways, Express!\nSo, what should we do for 5.0:\n\nRemove setting inheritance and make it opt-in only\na. per setting\nb. any setting\nFix setting inheritance to differentiate \"default settings\" from Express itself vs user-set settings. When sub apps are mounted, all non-user-set settings will thus be inherited (which means default Express settings would now be inherited)","createdAt":"2015-02-17T05:50:09Z","updatedAt":"2015-08-28T11:57:02Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2603,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2603","state":"OPEN","title":"Multiple callbacks on app.param. Eg: app.param('resource', cb1, cb2)","description":"Duplicate of #2181, but since it has been locked I have to create a new issue.\nI saw in the last comment from #2181 that a use case was required:\nConsidering one would want to do both authorization and loading for en entity, having both callbacks defined in the app.param() would be more readable, as well as provide controller reuse:\napp.all('/app/entity*', permissions.initEntityAuth);\n\napp.all('/app/entity/:entityid*',\n  entity.authorize,\n  entity.loadEntity,\n  function (req, res, next) {\n    return next('route');\n  });\n\napp.route('/app/entity/:entityid')\n    .get(...)\n    .put(...);\nvs\napp.all('/app/entity*', permissions.initEntityAuth);\n\napp.param('entityid', \n   // everything done inside this controller. Reuse level 0.\n   entity.authorizeAndLoad);\n\napp.route('/app/entity/:entityid')\n    .get(...)\n    .put(...);\nvs\napp.all('/app/entity*', permissions.initEntityAuth);\n\napp.param('entityid', \n    // Ohh, no. I have to maintain an async_wrap now\n    some_async_wrap(entity.authorize, entity.loadEntity));\n\napp.route('/app/entity/:entityid')\n    .get(...)\n    .put(...);\nvs\n// It seems to be much more readable as well as keeping the code reuse \napp.all('/app/entity*', permissions.initEntityAuth);\n\napp.param('entityid', \n   entity.authorize, \n   entity.loadEntity);\n\napp.route('/app/entity/:entityid')\n    .get(...)\n    .put(...);\nWhat do you think?","createdAt":"2015-03-24T17:04:49Z","updatedAt":"2015-05-15T07:26:22Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"razvanz","avatarUrl":"https://avatars0.githubusercontent.com/u/3844203?u=85f390c3428ead9f7f6e79c330f660aefa26a2bc&v=4","url":"https://github.com/razvanz"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2689,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2689","state":"OPEN","title":"Suggestion on keeping req.param with a better approach","description":"req.param is a very useful utility for us to easily get parameters from many places, thought it would introduce minor problems. But I think it would be better to keep it by solve problems inside express.\nthe direct using of req.body, req.params, req.query is still very harmful, than using req.param()\nwhich won't change req.body, req.params, req.query's self value.\nbut if we let the client programmer directly use them, it would lead to a new wrong way .\nHere is some code i would like to put as a possible approach.\nreq.param = function param(name, from) {\n  var params = {};\n  switch(from) {\n    case 'body':\n    params = this.body;\n    break;\n    case 'query':\n    params = this.query;\n    break;\n    default:\n    params = this.params;\n    if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n    return undefined;\n  }\n  if (null != params[name]) return params[name];\n  return undefined;\n};","createdAt":"2015-06-25T05:58:50Z","updatedAt":"2015-07-06T08:13:42Z","closedAt":null,"labels":[{"name":"4.x","color":"ededed"},{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"calidion","avatarUrl":"https://avatars0.githubusercontent.com/u/131776?u=24da19465a5f634ec287daa50366bb3a7d3c9002&v=4","url":"https://github.com/calidion"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2692,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/2692","state":"OPEN","title":"Cleaner way for redirecting back to the Referrer","description":"The 'back' special case has been moved from res.location() to a new req.back getter. In the future, this will make it possible to redirect to a regular 'back' page.","createdAt":"2015-06-28T00:07:08Z","updatedAt":"2019-12-12T16:33:59Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"discuss","color":"02d7e1"},{"name":"pr","color":"006b75"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"ricordisamoa","avatarUrl":"https://avatars3.githubusercontent.com/u/4588496?v=4","url":"https://github.com/ricordisamoa"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2698,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2698","state":"OPEN","title":"debug module with dynamic behavior (enable/disable in runtime)","description":"Hi, I've sent a PR to the debug module project adding the capability of dynamic debug instances that can be enabled/disabled in runtime (this is, without having to restart the application):\n\nvisionmedia/debug#209\n\nI expect this to be also useful for express applications, so I wonder if you could provide some feedback on the PR :)","createdAt":"2015-07-03T09:51:10Z","updatedAt":"2015-07-03T17:04:40Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"ibc","avatarUrl":"https://avatars1.githubusercontent.com/u/16191?u=a457f638975fabeb9bda93153457cf0ed4b5e82f&v=4","url":"https://github.com/ibc"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2701,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2701","state":"OPEN","title":"double `next` call leads to cryptic error when `req.params` is called again","description":"The following snippet shows the failure scenario. A user is calling next() twice in some middleware (due to whatever) and then as a result, the req.params(...) call in a route handler fails with a less than helpful error message. I can't think of a reason for double calling next() to be supported so maybe we can error out quicker or with something more helpful seems sane and safe for users.\nvar express = require('./');\nvar supertest = require('supertest');\n\nvar app = express();\n\napp.use(function(req, res, next) {\n\n    // double callback here leads to cryptic error (see below)\n    // I think there should be better protection against invoking twice, thoughts?\n    next();\n    next();\n});\n\napp.get('/:product', function(req, res) {\n    req.params('foobar');\n    res.send('hello');\n});\n\nsupertest(app)\n.get('/foo')\n.end(function(err, res) {\n    console.log(res.text);\n});\n\n/*\nTypeError: Property 'params' of object #<IncomingMessage> is not a function\n    at /Users/dz/projects/express/fail.js:12:9\n    at Layer.handle [as handle_request] (/Users/dz/projects/express/lib/router/layer.js:95:5)\n    at next (/Users/dz/projects/express/lib/router/route.js:131:13)\n    at Route.dispatch (/Users/dz/projects/express/lib/router/route.js:112:3)\n    at Layer.handle [as handle_request] (/Users/dz/projects/express/lib/router/layer.js:95:5)\n    at /Users/dz/projects/express/lib/router/index.js:277:22\n    at param (/Users/dz/projects/express/lib/router/index.js:349:14)\n    at param (/Users/dz/projects/express/lib/router/index.js:365:14)\n    at Function.process_params (/Users/dz/projects/express/lib/router/index.js:410:3)\n    at next (/Users/dz/projects/express/lib/router/index.js:271:10)\n*/","createdAt":"2015-07-08T17:48:09Z","updatedAt":"2016-02-17T14:37:01Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"defunctzombie","avatarUrl":"https://avatars2.githubusercontent.com/u/84792?v=4","url":"https://github.com/defunctzombie"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2750,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2750","state":"OPEN","title":"Is an Etag included in a response's trailer checked?","description":"Looking here, I don't think it is: https://github.com/strongloop/express/blob/f73ff9243006ea010fffdaa748f06df3a5b986e7/lib/request.js#L444\nSeems to me the headers and trailers should be merged when checking Etag value here.","createdAt":"2015-09-02T22:14:01Z","updatedAt":"2016-02-29T15:49:55Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"wprl","avatarUrl":"https://avatars0.githubusercontent.com/u/692511?u=8bd0d5d9bbb5c5e4d14db10ba60ad106e9d9f23b&v=4","url":"https://github.com/wprl"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2755,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2755","state":"OPEN","title":"Should Express 5.0 require a minimum of Node.js 4?","description":"This is a discussion regarding having Express 5.0 drop support for Node.js 0.10. One of the reasons for the delay in Express 5.0 was the announcement of the official merging of Node.js and io.js, and we were looking forward to it's outcome to determine what we should do with Express 5.0.\nHere at Express, we value very long-lived major versions, allowing users to confidentially build their new server on Express and not have to worry about needing to upgrade across a major, breaking change for years. Express 4.0 has been out for over a year now and Express 3.0 was supported for over 3 years !!\nWhen Express 5.0 comes out, Express 4.x line will continue to be fully supported, delivering our users bug fixes, new features, and more!\nTo this end, we have been carefully watching io.js/Node.js in relation to Express 5.0 such that we can continue this great support history without accidentally locking us into the past for a long time.\nPlease share your thoughts here.","createdAt":"2015-09-12T16:41:29Z","updatedAt":"2020-03-20T11:31:48Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2756,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2756","state":"OPEN","title":"feat: Support typed params in routes","description":"I mean, do something like:\napp.route('/:an_id{number}');\napp.route('/:another_id{string}')\nwhich is roughly equivalent to use regex in each case, but the shorthand above is clearer and allows req.params to properly type the params, fi: req.params.an_id would be a number instead of a string.\nThanks","createdAt":"2015-09-16T20:44:36Z","updatedAt":"2016-02-19T17:12:45Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"},{"name":"module:router","color":"bfe5bf"}],"assignee":null,"author":{"login":"diosney","avatarUrl":"https://avatars2.githubusercontent.com/u/1340074?u=58dfe206b651bb4448bc5e2f053c06547d52f5c0&v=4","url":"https://github.com/diosney"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2811,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2811","state":"OPEN","title":"Express and middleware that manipulate reponses","description":"AFAIK, there is currently no generic / documented way to manipulate responses before they are passed on to the underlying socket (through a transform stream for example). I can think of 2 instances where this would be useful: compression and monitoring outgoing bandwidth.\nThe https://github.com/expressjs/compression/ module resorts to monkey patching the res object which is prone to error, difficult to maintain and not extensible.\nIt would be nice if there was a documented and extensible way to manipulate responses before they are passed to the underlying socket.","createdAt":"2015-11-20T14:07:39Z","updatedAt":"2017-07-10T02:48:10Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"olalonde","avatarUrl":"https://avatars2.githubusercontent.com/u/416585?u=9ef06a9dde6c267acced5c10ff4b6ef6c1602394&v=4","url":"https://github.com/olalonde"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2812,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2812","state":"OPEN","title":"Decoupling express.request and express.response from express application","description":"I'd like to be able to use express.request and express.response outside of an express application \"instance\". This means I'd be able to use them as prototypes for my own request and response objects. Additionally, I'd like to also define which objects they delegate to for their prototypes (I understand this last part is possible already but its not first-class and it won't work in an ES2015 world where imports are read-only).\nI'm a big fan of the work that was done to decouple the router implementation into its own module so that it no longer assumes the presence of an express application. I believe what I am proposing is in the spirit of that effort.\nA couple use cases I'm hoping to address:\n\nTesting for standalone router: I have a router which depends on its request and response arguments to implement the express.request and express.response interfaces. I'd like to write unit tests that are minimal, so I don't want to initialize an express application, nor do I want it to listen on a port or socket. Ideally, I could create some request and response objects directly from the express prototypes, and also plug in a \"mock\" for http.IncomingMessage and http.ServerResponse (that don't need to actually do any networking) to be one level up the prototype chain. Then I could just invoke my router's handle() method with the arguments I've constructed and set up assertions on the behavior. This is currently not possible because both request and response have methods that read settings from this.app. I've take a look at the tests for pillarjs/router and they seem to be limited to only use API on request and response that are provided by node core.\nExtensibility: I've seen a few issues on the tracker that are essentially asking for the ability to rewire request and response to expose more or different functionality. Its been noted that the design of express was to be a thin wrapper on top of the node core HTTP API, and thats where the limitations come from. If instead of directly using private API of http.IncomingMessage and http.ServerResponse, we had a declared interface (one that the aforementioned types already adhere to or do so through a thin adapter) for what express.request and express.response rely on up the prototype chain, we could enable much more innovation in the ecosystem. Express would also benefit from seeing experimentation on those layers and adopt proven and useful extensions back into its core.\n\nOpen Questions:\n\nIf response and request don't read its settings from application, where do they read it from?\nWhat is the role of application when router (middleware), request, and response don't need it? Is it just a convenience for wiring things up in the \"default\" way?","createdAt":"2015-11-23T05:07:33Z","updatedAt":"2016-12-21T12:54:01Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"aoberoi","avatarUrl":"https://avatars3.githubusercontent.com/u/494795?u=5fee4a45c1feeb1c67db0a66b910b637bc35c714&v=4","url":"https://github.com/aoberoi"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2878,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2878","state":"OPEN","title":"Support for auto-generated Accept-Patch header","description":"The auto-generated OPTIONS response works well, but it there currently isn't any option that you can set to include Accept-Patch for the media type(s) that your API's PATCH request accepts.\nCreating a middleware function like this doesn't work because the middleware executes before the auto-generated OPTIONS response:\nlet acceptPatch = function(req, res, next) {\n  if (/PATCH/.test(req.get('Allow')))\n    res.set('Accept-Patch', 'application/json')\n  next()\n}\nrouter.use(acceptPatch) // won't work because req.get('Allow') hasn't been auto-generated yet","createdAt":"2016-02-04T08:34:50Z","updatedAt":"2016-02-15T21:58:52Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"investigate","color":"bfdadc"},{"name":"module:router","color":"bfe5bf"}],"assignee":null,"author":{"login":"Risto-Stevcev","avatarUrl":"https://avatars3.githubusercontent.com/u/6767374?u=c76f74bb3ef3bd4eb28c609d438fbc64243598a6&v=4","url":"https://github.com/Risto-Stevcev"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2888,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2888","state":"OPEN","title":"discuss commit guidelines","description":"We should probably discuss how we want commit styling and signoff.\ni.e. No-one in node core commits without review, but I am not 100% sure that is necessary here.\nExample of a node core commit:\ndoc: say hello in under 50 chars\n\ndescription in under 72 chars/line\n\nFixes: <full url>\nPR-URL: <full url>\nReviewed-By: Name <email@example.com>\n\ncc @expressjs/express","createdAt":"2016-02-11T14:41:57Z","updatedAt":"2016-02-18T19:50:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"meta","color":"fef2c0"}],"assignee":null,"author":{"login":"Fishrock123","avatarUrl":"https://avatars1.githubusercontent.com/u/1093990?u=3c6722495082f714ddfa170f7fe23b0d3b73168c&v=4","url":"https://github.com/Fishrock123"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":2896,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/2896","state":"OPEN","title":"Define error-handling middleware functions explicitly (without arity detection)","description":"I propose adding an explicit app.error method for defining error-handling middleware functions:\napp.error(function(err, req, res, next) {\n  res.status(500).send('Something broke!');\n});\nInstead of:\napp.use(function(err, req, res, next) {\n  res.status(500).send('Something broke!');\n});\nIt's so easy to forget the next argument when it's not being used in the body of the function, and that changes the whole meaning of the middleware. express is one of the only packages that has this pattern. Others that used this pattern in the past (i.e. superagent) have since removed it.\nFurthermore, this clashes with popular linting rules like ESLint's no-unused-vars rule which enforce that all named arguments must be used in the function body. Users who see this rule and remove the un-unsed next parameter will be unwittingly changing the behavior of their program.\nNo one expects removing an unused parameter to change the behavior of a program.\napp.use(function(err, req, res, next /* <-- unused, guess I'll remove this... */) {\n  res.status(500).send('Something broke!');\n});\nThe four argument middleware convention should be deprecated in favor of app.error, but support for it could remain for a long time, or even indefinitely. I just want to be able to recommend that folks use app.error going forward.","createdAt":"2016-02-19T08:10:12Z","updatedAt":"2019-02-26T17:35:08Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"feross","avatarUrl":"https://avatars2.githubusercontent.com/u/121766?v=4","url":"https://github.com/feross"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3073,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3073","state":"OPEN","title":"modular support","description":"Man, your ExpressJS should support something like this:\ncore module configuration file (core.config.js) returns\nmodules[module] = {\n    name: module,\n    root: root,\n    view_path: view_path,\n    routes: routes,\n    view_engine: view_engine\n  };\nand then, in server.js we can do:\n_.each(modules, function(module){\n      if(module){\n        app.set('root', module.root);\n        app.set('module_name', module.name);\n\n        require(module.routes)(app);\n        app.set('module_view', module.view_path);\n        app.set('module_view_engine', module.view_engine); \n        console.log(module.name, module.view_engine);\n      }\n    });\nOR better\n_.each(modules, function(module){\n      if(module){\n        app.moduleSet(module);\nSo we don't have to hack around! by pushing them (the views) to an array and unable to attain dynamic view engine on render. The views array is like a tiger skin, a unclassified combined mesh of things (views folders of every module) and it is not possible to set view_engine per module (per view_path).\n_.each(modules, function(module){\n      if(module){\n        app.set('root', module.root);\n        app.set('module_name', module.name);\n        require(module.routes)(app);\n        views.push(module.view_path);\n        view_engines.push(module.view_engine);        \n        // app.engine(module.view_engine, engines[module.view_engine]);\n        console.log(module.name, module.view_engine);\n      }\n    });\n\n    /* swig & handlebars require engine to be declared\n    app.engine('html', swig.renderFile);\n    */\n\n\n    app.set('views', views);\n    app.set('view engine', 'pug');\nThen, in our moduleA.controllers files, we have to do this:\nexports.todos = (req,res) => {\n  app.set('view engine', 'hjs');\n  // or with json\n  var config = require('../configs/module.config.json');\n  app.set('view engine', config.view_engine);\n  var todos = [\n    {\"task\":\"task1\", \"description\":\"task1_desc\"},\n    {\"task\":\"task2\", \"description\":\"task2_desc\"}\n  ];\n\n  // res.send('ok');\n  // res.json(todos);\n // for todo.hjs\n  res.render('todos', {\"todos\": todos});\n};\n\nIn moduleB.controllers file, we have to the similar with 'pug' in place of 'hjs'.\nI don't know how the MEAN.js stack handles this, it seems working smoothly but requiring Grunt|Gulp and a lot of 'grunt work' picking up the views folder per module and render. Please enlighten me.\nLet me know how you guys handle the issues to be able to render different view engines per module for different views-routes.\ncurrent working project: https://github.com/zenithtekla/nodeMySQL","createdAt":"2016-08-31T20:16:24Z","updatedAt":"2017-02-23T21:26:10Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"zenithtekla","avatarUrl":"https://avatars3.githubusercontent.com/u/11691367?u=426c32a8802ae63173ba8a35aa65fcd875253eb4&v=4","url":"https://github.com/zenithtekla"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3132,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3132","state":"OPEN","title":"Issue warnings when Express used in \"unexpected\" ways","description":"Overall, I am very pleased with Express and have developed very successful API's with it. However, I decided to raise this issue, because over the last couple of months, I've run into 3 separate very hard to debug issues with different apps, which all shared the same common root causes in Express.\nBasically in all of the cases it boiled down to user error, and was one of two things:\n\nCalling next() twice in the same middleware due to a forgotten/omitted return.\nEnding a middleware stack prematurely with res.end() while there was more middleware expected to run\n\nIn each case, Express did not actually trigger an error, but the resulting behaviour of the app was very flaky and it took us a long time, literally hours, to pinpoint the problems which were in fact trivial to fix.\nSo my question is if it's possible to have Express \"guard\" against these kind of cases somehow and maybe depending on your configuration/settings, have Express trigger warnings if such unexpected behaviour is registered?\nI realize it's probably a valid use case to have some middleware in the middle of the stack terminate the response, so it would be hard to write rules around that, but I don't think it's ever expected that the same next handler is called twice in the same middleware.\nAny thoughts on how we as developers can better guard against such issues?","createdAt":"2016-11-17T21:12:36Z","updatedAt":"2016-11-17T22:17:06Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"adamreisnz","avatarUrl":"https://avatars0.githubusercontent.com/u/490562?u=a1d72131538bdcb8ed81ef7deb59f019abda8684&v=4","url":"https://github.com/adamreisnz"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3201,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3201","state":"OPEN","title":"[REQUEST] callback handler for methods","description":"I'm referring to this bit\nRoute.prototype[method] = function(){\n    var handles = flatten(slice.call(arguments));\n\n    for (var i = 0; i < handles.length; i++) {\n      var handle = handles[i];\n\n      if (typeof handle !== 'function') {\n        var type = toString.call(handle);\n        var msg = 'Route.' + method + '() requires callback functions but got a ' + type;\n        throw new Error(msg);\n      }\n\nI wanna be able to pass something like\napp.get('/api/user', 'User@get');\n\nMaybe you could implement something like:\nexpress.callbackHandler() \nthat we should use like this\nexpress.callbackHandler(function(cb){\nif(cb.constructor === String){\nreturn require(cb)\n}\nreturn cb;\n})","createdAt":"2017-02-11T11:33:09Z","updatedAt":"2017-03-28T05:57:58Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"zecar","avatarUrl":"https://avatars1.githubusercontent.com/u/8117818?u=bd6166ffb853ab785567d795894122603de2c2b9&v=4","url":"https://github.com/zecar"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3346,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3346","state":"OPEN","title":"default env to production","description":"I just want to query the defaulting of env to 'development' in app.defaultConfiguration.\nIn a situation where verbose error messaging may expose sensitive information, there is a risk on information leakage from someone failing to explicitly set NODE_ENV=production.\nI'm keen to see the arguments for it being 'development', my feeling is that it should be defaulted to 'production' and then if for some reason it hasn't been explicitly set so, the risk of information leakage is mitigated. Though its entirely likely I'm just being stupid.\nEDIT:\nBecause it felt like a bit of bad manners to raise an issue without raising a PR to fix it see here: #3347\nEDIT: On 'view cache' and more\nHaving read through:\n\nhttps://expressjs.com/en/advanced/best-practice-performance.html#set-nodeenv-to-production\nhttps://github.com/expressjs/express/blob/master/lib/application.js\n\nThe key performance benefit of setting NODE_ENV=production is that views are cached when using app.render. With the first link above stating an app performance boost of up to 'a factor of 3'.\nAgain I think there is benefit to defaulting to 'production' in this case, as by default we should want 'express' to be the most performant it can be, giving users the best possible experience straight out of the box.","createdAt":"2017-06-22T15:34:04Z","updatedAt":"2018-12-12T15:03:24Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"maxcbc","avatarUrl":"https://avatars1.githubusercontent.com/u/11778762?v=4","url":"https://github.com/maxcbc"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3367,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3367","state":"OPEN","title":"Suggestion: Implicitly-named error handler","description":"Apologies if this has been already requested, if it has I've been unable to find it in the issues or elsewhere on this project page. If this is completely contradictory to the intended design of express and I'm an utter moron, then for that, I also profusely apologise\nAs per the documentation (https://expressjs.com/en/guide/error-handling.html), it's recommended or suggested practice to place error handlers after middleware to pick up any errors that get passed on.\nHowever, when I am working on projects containing a lot of middleware, it is a little bit of an eyesore to keep pasting in error handlers after middleware, and also some middleware doesn't properly implement errors or doesn't catch some errors, it becomes a pain (and yes, I am raising those instances with the middleware I encounter, too).\nThis means that an error handler at the bottom of the middleware calls, which could be called, for want of a better phrase, a global error catcher, doesn't always work. For example, when using body-parser among other middlewares, and receiving invalid JSON, an error handler needs to be put specifically after body-parser to catch the invalid JSON.\nNow, is it not possible for Express to pass back any errors it encounters iterating over middleware, back to one single function/class/whatever that the developer supplies (as a promise or whatever is desired) and cut off the chain of passing down middleware when it does that? That way, you can have all your error handling implemented in one place, and not have to copy-paste your error handler after every piece of middleware to make sure it catches the error you're looking for?\nIt'd still be an option to use the iterative approach, of course, but is this not a possibility in future versions?\nCheers,","createdAt":"2017-07-17T10:06:02Z","updatedAt":"2017-07-19T16:17:04Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"jordantogether","avatarUrl":"https://avatars2.githubusercontent.com/u/23552722?u=65ad0f0dff698086608b05dfa193f079bd62139a&v=4","url":"https://github.com/jordantogether"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3407,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3407","state":"OPEN","title":"Deprecate req.path and replace with req.pathname","description":"So currently in Express 4 (and lower) there is req.path, which is added by Express. This property will return the pathname of the given request. There has surfaced two issues here now:\n(1) The new Node.js HTTP/2 compatibility API introduces a new (currently undocumented) req.path property that is an alias for the :path puesdo-header (req.headers[':path']) and so the meaning of req.path in Express vs in the HTTP/2 compatibility layer differ (Express = pathname of req.url and HTTP/2 compatibility API = :path header, basically what req.url is in HTTP/1).\n(2) The property itself is sort-of misnamed, similar to the req.host header that was deprecated already and replaced with req.hostname (to come back in Express 5.0 with the current meaning in req.host).\nI am proposing that req.path is deprecated in Express 4 with a new req.pathname introduced in Express 4 and beyond to hold the existing req.path behavior.","createdAt":"2017-09-03T23:01:33Z","updatedAt":"2017-09-25T04:11:07Z","closedAt":null,"labels":[{"name":"4.x","color":"ededed"},{"name":"deprecate","color":"f7c6c7"},{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3555,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3555","state":"OPEN","title":"node http code change could have major effect on express","description":"In node, commit nodejs/node@a899576 that landed yesterday can have major problems for express if someone does use the IncomingMessage option.\nOn line 31 of request https://github.com/expressjs/express/blob/master/lib/request.js#L31 express references http.IncomingMessage.prototype to extend it with all the express functionality.\nIf someone changes the http IncomingMessage class and doesn't extend IncomingMessage then the reqs will not have any of express functions.\nNot sure why someone would, but they have the option to replicate the whole class without having to extend the real one.\nI haven't tested this yet (I will need to learn how to build node).. but I wanted to give everyone the heads up.","createdAt":"2018-02-07T17:09:37Z","updatedAt":"2018-02-13T05:25:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"WORMSS","avatarUrl":"https://avatars3.githubusercontent.com/u/1384537?v=4","url":"https://github.com/WORMSS"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3710,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/3710","state":"OPEN","title":"Add install size badge to README","description":"This adds a new badge to the top of the README.md file to display the install size for express and it's dependencies.","createdAt":"2018-08-09T19:01:49Z","updatedAt":"2019-12-12T16:33:54Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"pr","color":"006b75"}],"assignee":null,"author":{"login":"styfle","avatarUrl":"https://avatars1.githubusercontent.com/u/229881?u=95ef292ae4de28398c06ec6619f00d546bd3032f&v=4","url":"https://github.com/styfle"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":3935,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/3935","state":"OPEN","title":"A Cookie `maxAge` of `undefined` causes incorrect behavior.","description":"In lib/response.js in res.cookie() some assumptions are made that the incoming maxAge option will always be a number. However, if maxAge is set to undefined through some process, opts.maxAge /= 1000 returns NaN. maxAge should be verified and/or coerced to be numeric.","createdAt":"2019-04-18T12:51:07Z","updatedAt":"2020-04-15T12:51:28Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"cjbarth","avatarUrl":"https://avatars0.githubusercontent.com/u/3049726?u=058d36b239e26b8c55a1eb1d8663707b03a37d66&v=4","url":"https://github.com/cjbarth"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"express","number":4186,"isPullRequest":false,"url":"https://github.com/expressjs/express/issues/4186","state":"OPEN","title":"Zone.js for async error handling","description":"Currently when i create a new express application.\nThat application has a default error handling.\nSo code like this:\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"*\", function() {\n    throw new Error(\"something happened\");\n})\n\napp.listen(3000, function() {\n    console.log(\"we are now listening to port 3000\");\n});\n\nWill cause the default express error handler to kick in.\nThe js process does not crash and everything works as expected.\nFor async error the behaviour is different and my question is why?\nwith Zone.js we can now do a similar behaviour.\nFor example:\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"*\", function() {\n    setTimeout(() => {\n        throw new Error(\"something happened\");\n    }, 500);    \n})\n\napp.listen(3000, function() {\n    console.log(\"we are now listening to port 3000\");\n});\n\nthe above code will crash the process.\nAccording to express docs.\nwe can handle sync error but the async error you will have to call next with the error.\nSo the above code should be like so:\napp.get(\"*\", function(req, res, next) {\n    setTimeout(() => {\n        next(new Error(\"something happened\"));\n    }, 500);    \n})\n\nSo this behaviour seems non ideal to me, cause in my opinion, with zone.js in the picture we can reach a much better results.\nI would love to open a discussion on the matter...\nThe ideal is similar behaviour with sync and async errors (which is quite possible with zone.js to identify error that originate from async code inside express middleware functions).\nso to summarise I would see the async error handling working like this:\n\nif we are using next(new Error()) then great let's keep the same behaviour.\nif not, determine with zone.js if we have exception in our async code that originated from one of our middleware functions, and pop the default error handler (and of course the process will not crash).\nThis will result in much stable apps (process won't be close on async errors) and another added bonus is better debugging, and better error messages and stack traces of the exceptions in our async code.","createdAt":"2020-02-14T15:09:06Z","updatedAt":"2020-02-28T02:34:51Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"ywarezk","avatarUrl":"https://avatars2.githubusercontent.com/u/2714362?v=4","url":"https://github.com/ywarezk"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"morgan","number":222,"isPullRequest":false,"url":"https://github.com/expressjs/morgan/issues/222","state":"OPEN","title":"Discuss: morgan@2.0.0","description":"Opening this to start a discussion about if a v2 of morgan would be considered and what the goals of it would be.\nAs someone who would be happy to contribute to the effort, I wanted to gauge interest and come up with ideas of what a v2 would be looking to accomplish.\nSome issues I think are relevant for a v2:\n\n#190 - officially remove morgan.default\n#142 & #141 - finding an alternative to adding values to the req and res objects or coming up with a safer naming convention as to not conflict with other middleware\n\nSome ideas:\n\nremoving the compile function. the compile can be difficult to understand and uses what some consider to be an [unsafe technique] - (https://github.com/expressjs/morgan/blob/master/index.js#L3910) - #223 closed due to convincing by Doug that compile is valuable to users\nreplacing the token syntax with functions. Using a function is already documented and if compile is removed, we'd need to move all tokens to plain functions. - if compile stays, we need token syntax","createdAt":"2020-02-24T21:14:37Z","updatedAt":"2020-03-10T22:26:56Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"ryhinchey","avatarUrl":"https://avatars0.githubusercontent.com/u/3943764?v=4","url":"https://github.com/ryhinchey"}},"project":{"name":"expressjs/morgan","repo":"expressjs/morgan","repoOwner":"expressjs","repoName":"morgan","repoBranch":"master","repoDirectory":"/","packageName":"morgan"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"multer","number":174,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/174","state":"OPEN","title":"Default to disk storage","description":"The readme states\n\nIn case you omit the options object, the file will be renamed and uploaded to the temporary directory of the system.\n\nHowever looking at the code if the options is undefined, it passes in an empty object.\nThen if storage and dest are undefined it uses memory storage.\nI got the behavior I expected the library to have by default with\nvar multer = require('multer')\nvar tmp = require('tmp');\nvar upload = multer({dest: tmp.dirSync().name});\nI would suggest either updating the docs or updating the implementation to be consistent with the docs. I prefer the latter.","createdAt":"2015-07-23T00:25:46Z","updatedAt":"2015-07-27T06:58:49Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"charlierudolph","avatarUrl":"https://avatars0.githubusercontent.com/u/1676758?u=17e1373fa72cc3d27578eb183eb7dd66765b0e3f&v=4","url":"https://github.com/charlierudolph"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"multer","number":211,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/211","state":"OPEN","title":"Modify files before storing them","description":"It would be useful to have the ability to modify files as they are uploaded. A simple example would be resizing an image using gd.\nMy initial thoughts are the fileFilter function could return the file as the second argument rather than a boolean. That way it could be manipulated in the fileFilter function and then be passed on to be stored, or dropped if false was passed instead of the file.\nhttps://github.com/expressjs/multer/blob/master/lib/make-middleware.js#L94\nThis would be more useful when using an external storage engine such as S3 as you wouldn't have to upload -> download -> edit -> re-upload.","createdAt":"2015-08-19T12:47:37Z","updatedAt":"2020-01-25T20:17:52Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"jacobtomlinson","avatarUrl":"https://avatars1.githubusercontent.com/u/1610850?u=e66b67fa11d1ee941c111bbaccaa81b03c3a3d18&v=4","url":"https://github.com/jacobtomlinson"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"multer","number":495,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/495","state":"OPEN","title":"Using temp files in new api is  not the right approach","description":"The new v2 api makes some breaking changes to the way the old api used to work.\nOne of the most notable changes are the removal of the storage engines and the exposure of a stream to be manipulated directly.\nAlthough this seem like and advance in my opinion this is actually a step back from the flexibility the v1 offers (at least in the way is drafted now).\nI found some problems in how the files are handled that starts with the use of the fs-temp module as an intermediary to handle files.\nHere is a small summary of the side effects of this decision.\n\n\nIf I want to store a file in a given folder now I have to manually write all the code required for this because I have no way to configure it. This was trivial in v1. The extra work required seems a lot compared to just writing a string with a path.\n\n\nI now have an extra file in my filesystem. This is bad for several reasons. Before, I took the file and wrote directly from the request to the destination, now I write them in a temporary folder and then move it to\nthe destination potentially requiring a lot more effort in storage space and processing than before. It is also not intuitive because is happening under the hoods without the user knowing that he should probably check the default os.tmpdir() folder for space.\n\n\nThe temporary files will be left in the filesystem. A lot of developers doesn't know how to properly deal with streams or files; even when they do, they probably forget to delete the copy after piping the file. This only adds to the extra work required to simply \"store a file\".\n\n\nIf I donâ€™t want to use the filesystem as my storage I still need to wait for all the I/O to finish before I can store my files elsewhere (the cloud, a database, etc.). Imagine this for a lot of large files.\n\n\nSummary, this change consumes a lot of resources just to be able to tell you the file size and the mime type. Maybe I'm missing something here but there might be another way to deal with this that does not imply stripping the api of features.\nI think that \"storing a file\" should not be more difficult than just create the stream, handling the success and the error and calling pipe.\nMaybe a way to tackle this problem is to accept a writable stream per file and pipe them automatically or expose busboy streams for consumption directly but definitely writing an extra temporary file inside a fixed folder will cause more problems than solutions.\nI wish the new api looks more like this\nconst upload = multer('/uploads');\nor maybe this\nconst upload = multer({\n    stream: (req, file) => {\n        return writableStream();\n    }\n});\nor both, but the point is that I still should be able to store my files easily and efficiently anywhere I want.","createdAt":"2017-06-04T23:42:32Z","updatedAt":"2020-01-25T21:16:46Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"devconcept","avatarUrl":"https://avatars0.githubusercontent.com/u/10549329?u=570b46811d9abb90c8d7862ff58d58c1b9f9bb9e&v=4","url":"https://github.com/devconcept"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"multer","number":778,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/778","state":"OPEN","title":"Error code LIMIT_UNEXPECTED_FILE is not clear enough","description":"Context:\nThe same error code LIMIT_UNEXPECTED_FILE is used for two scenarios:\n\nRequest exceeds the number of files for the same part name.\nRequest includes a file associated to a non expected part.\n\nProblem:\nThis collision forces developers to propagate the list of parts that may contain files or there is no way to identify the cause of the problem.\nSolution:\nThere are two possible alternatives to solve this problem:\n\nCreate a new error code for limit excesses despite it causes breaking changes (we should release it in a major version).\nAdd a new property to MulterError to improve the error handling.\n\nNext steps:\nPlease, think a bit about this and vote about it. Once the choice is done, I will code the improvement and open a pull request.","createdAt":"2019-09-19T14:10:37Z","updatedAt":"2020-01-16T00:05:03Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"}],"assignee":null,"author":{"login":"sergioregueira","avatarUrl":"https://avatars0.githubusercontent.com/u/16188556?u=b539562a7ef234ae940516627249fa2099ce9fc5&v=4","url":"https://github.com/sergioregueira"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"multer","number":854,"isPullRequest":false,"url":"https://github.com/expressjs/multer/issues/854","state":"OPEN","title":"Not have an array, but just one object, when maxcount is 1","description":"When using fields, for fields that have a maxCount of 1, don't have an array but a sigle file.\nThis makes coding much easier. For example, when having this:\n    const upload = multer().fields(\n          [\n            { name: 'signed', maxCount: 1 },\n            { name: 'generated', maxCount: 1 }\n          ]\n        )\n\nIt would be much nicer to have request.files.signed to be an object.\nRight now, you can do the same thing with .single(); however, you can only add one single() (you can't chain them).\nI am asking now before you actually release 2.0, because this WOULD be a breaking change.","createdAt":"2020-03-05T02:36:39Z","updatedAt":"2020-03-10T21:18:59Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"}],"assignee":null,"author":{"login":"mercmobily","avatarUrl":"https://avatars3.githubusercontent.com/u/2128734?v=4","url":"https://github.com/mercmobily"}},"project":{"name":"expressjs/multer","repo":"expressjs/multer","repoOwner":"expressjs","repoName":"multer","repoBranch":"master","repoDirectory":"/","packageName":"multer"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"response-time","number":17,"isPullRequest":true,"url":"https://github.com/expressjs/response-time/pull/17","state":"OPEN","title":"Explicitly pass the handler","description":"Since the codebase is not returning the next explicitly, when you have an async interface involving this library, the Promise exit early getting the implicit undefined until now returned.","createdAt":"2019-05-25T18:37:40Z","updatedAt":"2019-05-25T18:53:44Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"needs tests","color":"e11d21"},{"name":"pr","color":"006b75"}],"assignee":null,"author":{"login":"Kikobeats","avatarUrl":"https://avatars0.githubusercontent.com/u/2096101?u=b5b169cca744d3c2323175c62cba6983ccd5c7c9&v=4","url":"https://github.com/Kikobeats"}},"project":{"name":"expressjs/response-time","repo":"expressjs/response-time","repoOwner":"expressjs","repoName":"response-time","repoBranch":"master","repoDirectory":"/","packageName":"response-time"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"serve-index","number":76,"isPullRequest":false,"url":"https://github.com/expressjs/serve-index/issues/76","state":"OPEN","title":"How to handle fs.stat error on a file?","description":"There are two potential error cases at present:\n\nENOENT: null is returned rather than stat. This would cause an unhandled exception if it were ever encountered (i.e. the file is deleted between fs.readdir and fs.stat). However, it is unlikely that any one will ever encounter this error and much less likely that they will be able to repeat it to know what happened and submit a bug.\nOther errors (EPERM, etc). These are currently handled by passing the error to express and causing a 500 error.\n\nENOENT\nIn the first case I think we should just filter out the file.\nIf it's been deleted (or is otherwise a special type of file, such as a virtual file on fuse fs, which is returned from fs.readdir() but doesn't exist when you fs.stat()), why bother to show it? And why error out?\nOther Erorrs\nI disagree with the current behavior. For one, it's inconsistent between text/plain and application/json responses (work) and text/html responses (fail).\nI think we should instead provide a stat object that looks like this:\n{ \"name\": \"foo.txt\"\n, \"size\": 0\n, \"lastModified\": \"1970-01-01T00:00:00.000Z\"\n, \"type\": \"error/EPERM\"\n}\n\n(or maybe something more conventional liketype: application/vnd.eperm+x-error)\nOr perhaps omit the file.\nIn any case, I don't think that the current behavior of throwing a 500 on any single potential permission error is good behavior.","createdAt":"2018-08-13T03:14:21Z","updatedAt":"2019-04-30T04:15:54Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"solderjs","avatarUrl":"https://avatars3.githubusercontent.com/u/122831?v=4","url":"https://github.com/solderjs"}},"project":{"name":"expressjs/serve-index","repo":"expressjs/serve-index","repoOwner":"expressjs","repoName":"serve-index","repoBranch":"master","repoDirectory":"/","packageName":"serve-index"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":351,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/351","state":"OPEN","title":"automatically add .createSession(), .load(), and .regenerate() to Store","description":"As explained in #349, developers who want to write their own Store implementation for express-session face one of two choices:\n\ninclude express-session as a dependency and extend their Store from store.js\nreimplement the functionality of store.js, session.js, and cookie.js (or copy the files from express-session, which amounts to including it as a dependency, but without the benefit of avoiding redundant code)\n\nFor many people (myself included), I expect neither of these options is appealing. So instead of requiring the Store implementation to include .createSession(), .load(), and .regenerate(), I suggest that these methods be added to the Store object by express-session on initialization, similar to the way that .generate() is added to the Store here. Couldn't .createSession(), .load(), and .regenerate() be added to the Store in the same way?\nThese methods could either be moved to index.js like .generate(), or generate() could be moved to store.js, and the methods in store.js could be added to the Store on initialization.\nI'm happy to create a PR if this is an improvement you'd like to see implemented.","createdAt":"2016-08-30T04:33:09Z","updatedAt":"2016-08-30T04:55:04Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"future","color":"e102d8"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"dwhieb","avatarUrl":"https://avatars2.githubusercontent.com/u/5892997?u=e586f453f3e80d0f043a961d12dab6172162107a&v=4","url":"https://github.com/dwhieb"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":420,"isPullRequest":true,"url":"https://github.com/expressjs/session/pull/420","state":"OPEN","title":"add parametrizable get/setcookie","description":"usage:\nsession({\n\t...\n\tgetcookie({headers}, name, secrets) {\n\t\tif (headers.cookie) {\n\t\t\tvar cookies = cookie.parse(headers.cookie);\n\t\t\treturn signature.unsign(cookies[name] || '', secrets[0]);\n\t\t}\n\t\telse if (headers.authorization) {\n\t\t\treturn signature.unsign(headers.authorization || '', secrets[0]);\n\t\t}\n\t\treturn null;\n\t},\n\tsetcookie(res, name, val, secret, options) {\n\t\tvar signed = signature.sign(val, secret);\n\t\tvar data = cookie.serialize(name, signed, options);\n\n\t\tvar prev = res.getHeader('set-cookie') || [];\n\t\tvar header = Array.isArray(prev) ? prev.concat(data) : [prev, data];\n\n\t\tres.setHeader('set-cookie', header);\n\t\tres.setHeader('authorization', data);\n\t}\n})","createdAt":"2017-01-28T20:49:22Z","updatedAt":"2020-02-01T07:37:50Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"},{"name":"needs docs","color":"e11d21"},{"name":"needs tests","color":"e11d21"},{"name":"pr","color":"006b75"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"caub","avatarUrl":"https://avatars2.githubusercontent.com/u/3134574?u=ac13ee3c9d994d1204f6dd5663165b7ab8ebc5e9&v=4","url":"https://github.com/caub"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":468,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/468","state":"OPEN","title":"The capability to supply a serializer (parse, stringify) for the req.sessionID in setcookie & getcookie (due to privacy & security concerns)","description":"Due to privacy/security concerns, we have to encrypt the sessionID that's stored within a cookie. It would be great, if we could set a cookie value/sessionID serializer within the session options so we can keep using your excellent module. I am aware of the reasons for 'signing' a cookie values and being able to 'encrypt' the sessionID should not replace 'signing' the cookie. It should be in addition to 'signing' the cookie value.\nIf I would supply you with a pullrequest (from a fork) that implements the following change, the option to supply your own sessionID/value serializer using options.serializer; would you be willing to consider it?\n   function session(options) {\n      var opts = options || {};\n\n      // get/set the cookie value serializer\n      var serializer = opts.serializer || { parse: value => value, stringify: value => value };\n      ...\n   }\n\n   // set cookie\n   setcookie(res, name, serializer.stringify(req.sessionID), secrets[0], req.session.cookie.data);\n\n   function getcookie(req, name, secrets) {\n     ...\n     return serializer.parse(val);\n   }","createdAt":"2017-06-06T20:33:27Z","updatedAt":"2017-07-15T19:06:56Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"pascalvree","avatarUrl":"https://avatars0.githubusercontent.com/u/1583647?v=4","url":"https://github.com/pascalvree"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":711,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/711","state":"OPEN","title":"Get/set/destroy session based on request details","description":"I have an application that serves multiple domains (\"Host\" header values). Requests for each domain go to a different database, but it's still the same logic for all. I also want to store sessions for each domain in its respective database.\nThe current architecture of session stores doesn't allow that though. Everything about any store is set prior to requests, so one can't get/save/destroy based on the request.\nThis could change by adding the request as an additional argument to all required and reccomended methods, allowing stores to potentially accept config per request, and keep their existing behaviour when such a config is not supplied.\nI realize this may be a breaking change for some stores (and for the rest, there wouldn't be immediate benefit, until they take advantage of it), so if implemented, a major version bump would probably be in order.\nEDIT: I have an implementation at #712 that is backwards compatible with existing stores. It relies on checking the expected number of arguments in the handling function. A tactic used by some other libraries for similar purposes (notably, passport).","createdAt":"2019-11-06T08:27:39Z","updatedAt":"2020-03-02T21:54:53Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"boenrobot","avatarUrl":"https://avatars3.githubusercontent.com/u/1029536?v=4","url":"https://github.com/boenrobot"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":723,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/723","state":"OPEN","title":"First-class Typescript support","description":"Traditionally for the express ecosystem, typescript definitions have been created and maintained by great contributors to the DefinatelyTyped project. Types would be pulled in under a scope @types, separate from the module itself (@types/express-session, for instance).\nThese types are of various quality and many of the express community (like myself) is not familiar with (or use) Typescript, so don't know about it / would be able to identify an issue there.\n@HoldYourWaffle graciously has worked on fixing up the type definitions for this module and created PR #656 to add the definitions to the module package directly.\nThis brings up languishing sticking points for the longevity of this, of course, that I would like to discuss to understand as the package maintainer.\nPreface: Since the types would become part of the package, a given version with some new function signature would need a corresponding definition update. Failure to do so would mean a follow up release would need to me made (after eventually someone in typescript community tries to use it and then realizes, opens an issue, etc.). Under the @types a new version of the definitions would need to be published to add a new signature, which seems natural if the project doesn't keep them up.\nThat brings my thoughts always to the following: How can we prevent this \"fatigue\" between the maintainer and the typescript users?\nIs there some kind of automation that could be added to make a PR fail if type definitions were not updated correctly? Or maybe someone who can commit for at least some kind of long-haul, like at least a year, to review PRs / changes as they come in and maybe even provide what the corresponding type change is?\nI'm not sure, of course, about the above being disconnected from typescript.\n(note @HoldYourWaffle , this entire thread is a meta discussion, unrelated to actually landing your PR into this module, but related to it's protentional future removal if problem arise and there is no solution in place).","createdAt":"2020-01-20T00:20:33Z","updatedAt":"2020-01-22T20:24:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":725,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/725","state":"OPEN","title":"using secure=auto with sameSite=none","description":"With the upcoming chrome 80 release and the need to set sameSite=none for cross-browser requests it would be good to consider the scenario where secure is set to 'auto' (set based on 'x-forwarded-proto' header).\nChrome will start rejecting non 'secure' SameSite=None cookies. Therefore if the 'secure' attribute is not being set based on incoming request then sameSite=None option should revert to 'Lax'.","createdAt":"2020-02-02T23:33:29Z","updatedAt":"2020-04-04T13:39:58Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"nhitchins","avatarUrl":"https://avatars3.githubusercontent.com/u/2499197?u=db29f77d58091b3f8b63967890ae6ba07022b528&v=4","url":"https://github.com/nhitchins"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"session","number":76,"isPullRequest":false,"url":"https://github.com/expressjs/session/issues/76","state":"OPEN","title":"Exposing a test suite for implementers","description":"Throwing this out for discussion.  It seems like a core test suite for store implementors would be handy to ensure compliance with express-session.  Winston did this for loggers.  Implementors could include express-session in their test suite passing in their store, and have it run through a series of compliance tests.","createdAt":"2014-08-18T16:01:47Z","updatedAt":"2015-01-05T00:30:55Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"wavded","avatarUrl":"https://avatars3.githubusercontent.com/u/26638?u=405952052cea14850b53ce25a2463a0cd5d9810d&v=4","url":"https://github.com/wavded"}},"project":{"name":"expressjs/session","repo":"expressjs/session","repoOwner":"expressjs","repoName":"session","repoBranch":"master","repoDirectory":"/","packageName":"express-session"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"expressjs","repo":"timeout","number":26,"isPullRequest":false,"url":"https://github.com/expressjs/timeout/issues/26","state":"OPEN","title":"Extending the timeout","description":"So far as I understand it, the timeout value is set when you add the connect-timeout middleware when initializing the express server, so the same timeout applies to every request the comes in thereafter (that matches the route concerned).\nWhat I'm finding is that for some incoming GET requests, there is a particular combination of options in the request that causes a network fetch to a remote resource than is not very reliable.  For those requests, I'd like to relax the timeout value for connect-timeout somewhat, to allow for a few fetch retries.\nBut I can't see any way to change the timeout value 'on the fly', for a particular request.  The only control I can see over the timeout is to use req.clearTimeout() whilst processing a request.  This is helpful, but timeout is completely removed and will not fire for this request in the future.  This is not entirely what I'm looking to achieve... I would like to retain a timeout, but just a slightly longer one.\nIs what I'm asking for really naughty, breaking established rules of good practice of which I'm not aware?  Or is it a reasonable thing to want to do?","createdAt":"2017-03-18T21:19:37Z","updatedAt":"2018-06-13T13:22:40Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"drmrbrewer","avatarUrl":"https://avatars3.githubusercontent.com/u/9009792?u=e63bb990c2f1f77543eb0b9b652bb990256c15d5&v=4","url":"https://github.com/drmrbrewer"}},"project":{"name":"expressjs/timeout","repo":"expressjs/timeout","repoOwner":"expressjs","repoName":"timeout","repoBranch":"master","repoDirectory":"/","packageName":"connect-timeout"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"jshttp","repo":"accepts","number":14,"isPullRequest":false,"url":"https://github.com/jshttp/accepts/issues/14","state":"OPEN","title":"Document `req` Requirements","description":"Since this module and negotiator only ever request headers, do you think it'd be reasonable to document and test on this fact? For instance, I'd like to use this module with https://github.com/blakeembrey/node-servie and other non-node HTTP interfaces.","createdAt":"2017-02-03T01:50:54Z","updatedAt":"2017-12-13T13:32:39Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"blakeembrey","avatarUrl":"https://avatars0.githubusercontent.com/u/1088987?v=4","url":"https://github.com/blakeembrey"}},"project":{"name":"jshttp/accepts","repo":"jshttp/accepts","repoOwner":"jshttp","repoName":"accepts","repoBranch":"master","repoDirectory":"/","packageName":"accepts"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"jshttp","repo":"http-errors","number":49,"isPullRequest":false,"url":"https://github.com/jshttp/http-errors/issues/49","state":"OPEN","title":"Inconsistent error property enumerability","description":"You would expect these usages to log identically:\nimport createError from 'http-errors'\n\nconsole.log(\n  JSON.stringify(createError('Message 1.')),\n  JSON.stringify(createError(new Error('Message 2.')))\n)\nThey actually output this:\n{\"message\":\"Message 1.\"} {\"expose\":false,\"statusCode\":500,\"status\":500}\n\nFor context, I am attempting to do snapshot testing of errors that have been created various ways and am having many surprises.","createdAt":"2018-06-06T10:56:02Z","updatedAt":"2019-09-09T17:53:26Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"jaydenseric","avatarUrl":"https://avatars0.githubusercontent.com/u/1754873?v=4","url":"https://github.com/jaydenseric"}},"project":{"name":"jshttp/http-errors","repo":"jshttp/http-errors","repoOwner":"jshttp","repoName":"http-errors","repoBranch":"master","repoDirectory":"/","packageName":"http-errors"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"jshttp","repo":"mime-db","number":112,"isPullRequest":false,"url":"https://github.com/jshttp/mime-db/issues/112","state":"OPEN","title":"Add extensions for obsolete mimetypes","description":"Sometimes we'd want to lookup a file extension from a given mimetype. For example, we want to get \"js\" if we are given a mimetype \"text/javascript\". This is currently not possible since the \"extensions\" key for \"text/javascript\" is not defined.\nI'd suggest that we define an obsolete mimetype, such as \"text/javascript\", like this:\n\"text/javascript\": {\n  \"source\": \"iana\",\n  \"compressible\": true,\n  \"obsolete\": true,\n  \"extensions\": [\"js\"]\n},\n\nSo that the application is able to get an extension when \"text/javascript\" is given. If the application wants to reversely look for the mimetype for \"js\", it can ignore the \"text/javascript\" according to its \"obsolete\" value.\nWe can optionally add a \"canonical\": \"application/javascript\" to indicate what this obsolete mimetype is now redirected to.","createdAt":"2017-12-29T07:01:50Z","updatedAt":"2019-05-19T01:37:21Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"danny0838","avatarUrl":"https://avatars2.githubusercontent.com/u/531417?v=4","url":"https://github.com/danny0838"}},"project":{"name":"jshttp/mime-db","repo":"jshttp/mime-db","repoOwner":"jshttp","repoName":"mime-db","repoBranch":"master","repoDirectory":"/","packageName":"mime-db"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"jshttp","repo":"mime-db","number":20,"isPullRequest":false,"url":"https://github.com/jshttp/mime-db/issues/20","state":"OPEN","title":"Better way to manage extension priority for multiple types","description":"We need a better way to manage extension priority for multiple types (i.e. provide an extension -> mime mapping).\nThe reason we need this is because as we source from more places, you cannot just build this mapping in other libraries by iterating over the types and just accumulating the extensions in a map, as they may not be in the most optimal order.","createdAt":"2015-02-08T02:10:38Z","updatedAt":"2017-11-25T15:03:14Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"enhancement","color":"84b6eb"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"jshttp/mime-db","repo":"jshttp/mime-db","repoOwner":"jshttp","repoName":"mime-db","repoBranch":"master","repoDirectory":"/","packageName":"mime-db"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"jshttp","repo":"negotiator","number":38,"isPullRequest":false,"url":"https://github.com/jshttp/negotiator/issues/38","state":"OPEN","title":"Parameter value case-sensitivity is media-type specific","description":"I'm not sure what to do about this one...\nRight now, it looks like this library is always assuming that parameter values are case-insensitive. This is technically incorrect, as RFC 7231 says that \"Parameter values might or might not be case-sensitive, depending on the semantics of the parameter name.\" And, in fact, there are some media types that demand case sensitivity (for example, security-related types like \"application/cms\").\nThat said, being fully spec compliant here would require a ton of work (reading every registered media type's specification?) so it probably isn't worth it. Maybe the right answer is to continue to assume case-insensitivity and then keep a list of media type parameters whose values are case-sensitive, and add to that list only as real bugs arise?","createdAt":"2015-05-11T01:23:00Z","updatedAt":"2015-11-11T02:13:36Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"ethanresnick","avatarUrl":"https://avatars1.githubusercontent.com/u/471894?v=4","url":"https://github.com/ethanresnick"}},"project":{"name":"jshttp/negotiator","repo":"jshttp/negotiator","repoOwner":"jshttp","repoName":"negotiator","repoBranch":"master","repoDirectory":"/","packageName":"negotiator"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":38,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/38","state":"OPEN","title":"Routers with Isolated middleware stack","description":"The single stack middleware system of express seems to be a source of confusion for some developers. This is a proposal to isolate the middleware stack in a router from other routers mounted on the same app.\nCurrent behavior:\n\nA middleware defined without a path on router A will get executed for requests matching in router B.\n\nProposed behavior:\n\nA middleware defined without a path on router A  should get executed only for requests matching in router A, and not on any other router.\n\nThe current behavior of app.use(), which executes its middleware for all the requests to the app would remain the same and should be used for defining global middleware.","createdAt":"2016-02-29T13:03:47Z","updatedAt":"2019-05-21T21:16:44Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"hacksparrow","avatarUrl":"https://avatars1.githubusercontent.com/u/950112?u=80c4c544542a9cfa6fedaa81104f2e69daba42da&v=4","url":"https://github.com/hacksparrow"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":41,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/41","state":"OPEN","title":"router.bind is overridden as an http method","description":"Not sure if this is a new things in node 6, I'm running 6.1.0, but the core http.methods include the http BIND method.  When we loop the methods we end up overriding function.bind on the router instance causing weird behavior.  The test that broke was as follows:\nit('should reject missing callback', function () {\n  var router = new Router()\n  assert.throws(router.bind(router, {}, {}), /argument callback is required/)\n})\nThe intent here is obvious, but it ended up calling the method setup here.\nThere are three solutions I can see:\n\nFilter out known bad names (aka blacklist)\nOnly generate known good methods (aka whitelist)\nDocument the fact that we overrode .bind\n\nI can make a PR either way but wanted to open the discussion first.\nAlso for reference, here is the list I got by logging the methods array:\n[ 'acl',\n  'bind',\n  'checkout',\n  'connect',\n  'copy',\n  'delete',\n  'get',\n  'head',\n  'link',\n  'lock',\n  'm-search',\n  'merge',\n  'mkactivity',\n  'mkcalendar',\n  'mkcol',\n  'move',\n  'notify',\n  'options',\n  'patch',\n  'post',\n  'propfind',\n  'proppatch',\n  'purge',\n  'put',\n  'rebind',\n  'report',\n  'search',\n  'subscribe',\n  'trace',\n  'unbind',\n  'unlink',\n  'unlock',\n  'unsubscribe' ]","createdAt":"2016-05-19T18:47:13Z","updatedAt":"2016-05-19T19:25:07Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":43,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/43","state":"OPEN","title":"New API for specifying http method","description":"Starting with a discussion in #41, we need to come up with a new api for specifying the http method[s] for a handler.  Here are a few examples:\n\nrouter.methods('GET', 'POST').use('/', function () {});\nrouter.use(['GET', 'POST'], '/', function () {})\nrouter.route('/').methods('GET', 'POST').handler(function () {})\nrouter.route(['GET', 'POST'], '/').handler(function () {})\n\nAll of these are fairly consistent from the current API in my opinion, despite being breaking changes in a few cases.  Numbers 1 & 3 are not breaking changes AFAIK since they are just adding new methods.  Thoughts?","createdAt":"2016-05-19T19:54:34Z","updatedAt":"2017-07-28T17:31:39Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"}],"assignee":null,"author":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":48,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/48","state":"OPEN","title":"Typescript Typings","description":"Any chance of getting some @types/router typings published? Or are there any floating around that we can make official and publish.","createdAt":"2016-10-14T01:42:24Z","updatedAt":"2019-12-03T04:56:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"help wanted","color":"159818"},{"name":"top priority","color":"1af221"}],"assignee":null,"author":{"login":"origin1tech","avatarUrl":"https://avatars2.githubusercontent.com/u/1781771?v=4","url":"https://github.com/origin1tech"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":50,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/50","state":"OPEN","title":"Use named functions for error handlers","description":"Inspired by expressjs/express#2896, but proposed here because as a breaking change it likely won't make it into Express 4.0 anyway, and Express 5.0 references this.\nInstead of using the number of arguments to differentiate between error and normal handlers, is there any reason not to use named functions? Example:\nroute.get(function(req, res, next) {\n    next('oops')\n}, function(err, req, res, next) {\n    res.end('Error')\n})\n\nInstead, we could say:\nroute.get(function(req, res, next) {\n    next('oops')\n}, function error(err, req, res) {\n    res.end('Error')\n})\n\nAnd then just check for this.name instead of fn.length in layer.js:63.\nShould work in all places where error handlers can be specified here and in express unless I'm overlooking something, and would remove the need (and warnings) for unused parameters.\nCould even still allow the old style (but make it deprecated?) to not to break existing code.\nThoughts? :)","createdAt":"2016-10-28T12:41:55Z","updatedAt":"2017-01-29T01:23:21Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"CanisLupusXenonis","avatarUrl":"https://avatars1.githubusercontent.com/u/5897046?v=4","url":"https://github.com/CanisLupusXenonis"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"router","number":57,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/57","state":"OPEN","title":"Idea: Wrap usage of debug in NODE_ENV !== 'production' check","description":"This would enable users to optimize their builds using a tool like envify.  I have talked a little before about how I think the debug module is not a great overall solution because it loads and runs even when it is turned off.  In this case, my production browser builds get an extra ~4.5kb that they will never use.\nI know there are downsides to this, but I just wanted to bring it up in case anyone was interested in this.","createdAt":"2017-06-17T15:41:04Z","updatedAt":"2017-06-19T17:30:31Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"wesleytodd","avatarUrl":"https://avatars2.githubusercontent.com/u/1027776?v=4","url":"https://github.com/wesleytodd"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}},{"label":{"name":"discuss","color":"02d7e1"},"issue":{"owner":"pillarjs","repo":"send","number":160,"isPullRequest":false,"url":"https://github.com/pillarjs/send/issues/160","state":"OPEN","title":"Allow using alternate sources of files","description":"It would be useful to abstract the filesystem API so that, for example, in-memory files can be served.\nI have a proof-of-concept (or even solution?) at 6c87c36. It adds an fs property to the options which requires fs.stat and fs.createReadStream functions. Set the environment variable USE_MEMFS before running tests and the test will use memfs. memory-fs doesn't work because the fs.Stats objects it creates only has functions attached and not all of the usual properties.\nRelated: expressjs/serve-static#83","createdAt":"2018-06-08T21:45:36Z","updatedAt":"2020-04-14T12:39:37Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"ideas","color":"d7e102"}],"assignee":null,"author":{"login":"LynnKirby","avatarUrl":"https://avatars0.githubusercontent.com/u/23046446?v=4","url":"https://github.com/LynnKirby"}},"project":{"name":"pillarjs/send","repo":"pillarjs/send","repoOwner":"pillarjs","repoName":"send","repoBranch":"master","repoDirectory":"/","packageName":"send"}}],"top priority":[{"label":{"name":"top priority","color":"1af221"},"issue":{"owner":"expressjs","repo":"discussions","number":100,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/100","state":"OPEN","title":"express 5.0.0","description":"the original issue (PR expressjs/express#2237) that tracks this is locked up for probable unmanageable number of discussions and some of which off-topic? I can't find an active issue that tracks this, so opening one.\nI request to release express 5.\n\nhow was the user feedback on 5.0.0-alpha.7? if it is reasonably positive, does it make sense to cut that into 5?\nare there pending items in expressjs/express#2237 (comment) that are real blockers? can they be pushed to in 5.1?\ncan we have a TC meeting to discuss this - challenges, gaps, actionables and owners?\n\nI am not an express commiter, but a staunch fan. I can commit the necessary bandwidth required for upskilling myself and contribute to realize this!","createdAt":"2020-02-23T05:58:52Z","updatedAt":"2020-04-13T05:41:39Z","closedAt":null,"labels":[{"name":"discuss","color":"1d76db"},{"name":"top priority","color":"1af221"}],"assignee":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"},"author":{"login":"gireeshpunathil","avatarUrl":"https://avatars0.githubusercontent.com/u/6447530?u=c2bb7301d02114c26ca2bd85eeeb029e834fe3cd&v=4","url":"https://github.com/gireeshpunathil"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"top priority","color":"1af221"},"issue":{"owner":"expressjs","repo":"discussions","number":7,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/7","state":"OPEN","title":"TypeScript Definitions","description":"References: expressjs/express#2818, typings/typings#322, microsoft/TypeScript#7546.\nSummary: For Express 5.x, support TypeScript by packaging definitions with the project. This is used by TypeScript automatically when you add typings to the package.json. As part of the effort, there needs to be a good CI step and process in place. As the author of @typings, I have plenty of background on solving the issue, but it should be as straight-forward as possible for everyone to be involved.\nAn initial PR demonstrating TypeScript definitions is available at pillarjs/path-to-regexp#72 and awaiting some review. Integration with CI will be an ongoing topic, the best process is having TypeScript test files which will do type checking and runtime checking. However, the linked issue above is one approach that can also work (comparing what TypeScript knows about the .js package and our hand written .d.ts file).\nI'm opening this issue to give heads up and hopefully collaborate on the final solution for Express.js 5.x.","createdAt":"2016-03-17T01:31:16Z","updatedAt":"2020-02-17T18:51:12Z","closedAt":null,"labels":[{"name":"top priority","color":"1af221"}],"assignee":null,"author":{"login":"blakeembrey","avatarUrl":"https://avatars0.githubusercontent.com/u/1088987?v=4","url":"https://github.com/blakeembrey"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"top priority","color":"1af221"},"issue":{"owner":"expressjs","repo":"express","number":2237,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/2237","state":"OPEN","title":"Release 5.0","description":"This is a tracking issue for release 5.0.\n5.0.0-alpha.8 published on npm\nI am trying to give better visibility for upcoming changes and so am trying out making a PR for a release here, pulling from the official next release branch into 4.x. This allows for the current pending changes to be easily visible.\nPlease keep feature requests in their own issues\nI'm also leaving this PR unlocked so people can make comments/etc. and we'll see how it goes :) If you want to make a comment on a particular change, please make the comment in the \"Files changed\" tab so comments are not lost during a rebase (they will occur frequently has 4.x progresses).\nThe goal of Express 5 is to be API tweaks & the removal of all code from the Express repository, moving into components in the pillarjs project (https://github.com/pillarjs), providing at least basic support for promise-returning handlers and complete HTTP/2 functionality. Express 5 would become a \"view into pillarjs\" and would be an arrangement of these components.\nList of changes for release:\n\n Add support for Promises in all handlers #2259\n Bring back app.router which is just generally useful for directly calling to the router\n\n Make sure 3.x-style app.use(app.router) does not explode\n\n\n Fix views to resolve paths async #2653\n Make query parser option default to 'simple' #3361\n Make req.host actually return the host #2179\n Make req.query a getter instead of added by middleware #2215\n Make res.render always async callback, to hide sync view engines #2668\n Make res.render use the default engine even when an extension was found #2708\n Make res.sendFile use the \"etag\" application setting #2294\n Make res.status throw on invalid argument type #2795 #2797 #3111 #3137 #3143\n Make express.static use the \"etag\" application setting #2317\n New path matching syntax #2057 #2173\n Provide separate locals and options to view engine #2648\n Remove Express 3.x middleware error stubs #3217\n Use mime-types instead of mime\n Use path-is-absolute module for absolute path detection #2620\n\nList of deprecated things removed:\n\n Leading : in name for app.param(name, fn)\n app.del\n app.param(fn)\n req.acceptsCharset\n req.acceptsEncoding\n req.acceptsLanguage\n res.json(obj, status)\n res.json(status, obj) #2939\n res.jsonp(obj, status)\n res.jsonp(status, obj) #2940\n req.param()\n res.redirect(url, status) #2941\n res.send(body, status)\n res.send(status)\n res.send(status, body) #2942\n res.sendfile\n res.vary() (i.e. no arguments) #2943\n\nList of things to refactor (still provided by express):\n\n Better res.cookie and general cookie reading/setting (new keygrip and cookies modules; new req.cookies or such)\n Move prototype properties to own repo #2432\n Move Router to it's own repo #2411\n\nTesting this release\nIf you want to try out this release, you can install it with the following command:\n$ npm install expressjs/express#5.0\nOwners/collaborators: please do not merge this PR :)","createdAt":"2014-07-14T16:29:18Z","updatedAt":"2020-03-26T00:32:20Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"pr","color":"006b75"},{"name":"release","color":"000000"},{"name":"top priority","color":"1af221"}],"assignee":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"},"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"top priority","color":"1af221"},"issue":{"owner":"expressjs","repo":"express","number":3730,"isPullRequest":true,"url":"https://github.com/expressjs/express/pull/3730","state":"OPEN","title":"Support http/2.","description":"This PR is rebased and added tests from #3390\nWe need to disable some tests on http/2, as some node module have issue with http/2. PR pending on resolution of the following issues:\n\n // cookies with http2 has an issue pillarjs/cookies#99\n // vhost with http2 has an issue expressjs/vhost#29\n // HEAD with http2 does not support response body\nresponse.sendFile has an issu. See also #3730 (comment)\nfixed by commit 2a78f4c\n supertest http2 support (supertest removed in visionmedia/superagent@b08371c)\nFixed by visionmedia/superagent#1414\nCurrently this PR does not depend on above issue, but this PR and the superagent PR have deplicate codes. We can delete those code after landing PRs.\n http2ServerRequest.socket.destroy() has a bug (filed an issue ihttps://github.com/nodejs/node/issues/22855)\nFixed in nodejs/node#22896\nMaybe land on node 10.12.0","createdAt":"2018-08-28T12:39:55Z","updatedAt":"2020-03-25T02:23:46Z","closedAt":null,"labels":[{"name":"5.x","color":"ededed"},{"name":"enhancement","color":"84b6eb"},{"name":"pr","color":"006b75"},{"name":"top priority","color":"1af221"}],"assignee":null,"author":{"login":"sogaani","avatarUrl":"https://avatars2.githubusercontent.com/u/20137651?u=8baebcdf2b4db6225cf20aba69e8da6a4c05665e&v=4","url":"https://github.com/sogaani"}},"project":{"name":"expressjs/express","repo":"expressjs/express","repoOwner":"expressjs","repoName":"express","repoBranch":"master","repoDirectory":"/","packageName":"express"}},{"label":{"name":"top priority","color":"1af221"},"issue":{"owner":"pillarjs","repo":"router","number":48,"isPullRequest":false,"url":"https://github.com/pillarjs/router/issues/48","state":"OPEN","title":"Typescript Typings","description":"Any chance of getting some @types/router typings published? Or are there any floating around that we can make official and publish.","createdAt":"2016-10-14T01:42:24Z","updatedAt":"2019-12-03T04:56:38Z","closedAt":null,"labels":[{"name":"discuss","color":"02d7e1"},{"name":"help wanted","color":"159818"},{"name":"top priority","color":"1af221"}],"assignee":null,"author":{"login":"origin1tech","avatarUrl":"https://avatars2.githubusercontent.com/u/1781771?v=4","url":"https://github.com/origin1tech"}},"project":{"name":"pillarjs/router","repo":"pillarjs/router","repoOwner":"pillarjs","repoName":"router","repoBranch":"master","repoDirectory":"/","packageName":"router"}}],"meeting":[{"label":{"name":"meeting","color":"009800"},"issue":{"owner":"expressjs","repo":"discussions","number":112,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/112","state":"OPEN","title":"Express TC Meeting 04-01-2020","description":"Who\nThe entire community is welcome to tune in and observe the meeting live at the time below. The following people are listed here as explicit invitees to get an email notification about the upcoming meeting:\nInvited:\n\n@expressjs/express-tc\n@expressjs/triagers\n\nWhen\nApr 1, 2020 - 23:30 UTC \nWhere\nZoom, broadcasting on YouTube Live\n\nViewers: https://youtu.be/VBl8G4cJDL0\nParticipants: https://zoom.us/j/305917849\n\nAgenda\n\n2 active security issues (one that is open and one that is still under embargo)\nOfficial adoption of CoC for all Express projects as part of the joining into OpenJS (expressjs/express#4143)\nExpressjs.com updates and follow up from previous meeting on getting a list of the outstanding changes for the 5.x docs (expressjs/expressjs.com#1126)\nExpress 5 progress updates (#100); preview: release of latest router beta, release of express 5 alpha, merging of long-standing docs PRs, spinning up Express 4.18 for landing of the deprecations (expressjs/express#4208 and expressjs/express#4223), etc.\n\nPropose other agenda topics which can be added to this list.","createdAt":"2020-03-31T02:17:13Z","updatedAt":"2020-04-02T03:17:53Z","closedAt":null,"labels":[{"name":"meeting","color":"009800"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"meeting","color":"009800"},"issue":{"owner":"expressjs","repo":"discussions","number":115,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/115","state":"OPEN","title":"Express TC Meeting 04-08-2020","description":"Who\nThe entire community is welcome to tune in and observe the meeting live at the time below. The following people are listed here as explicit invitees to get an email notification about the upcoming meeting:\nInvited:\n\n@expressjs/express-tc\n@expressjs/triagers\n\nWhen\nApr 8, 2020 - 23:30 UTC \nWhere\nZoom, broadcasting on YouTube Live\n\nViewers: https://youtu.be/CWlOklAfiTY\nParticipants: https://zoom.us/j/305917849\n\nAgenda\n\nSecurity issue update\nExpressjs.com updates for 5.0, and further Express 4.18 / 5.0 updates (specific list coming on tuesday)\nTriage topics; ideally entire second half as much as we can get done. Ex \"discuss direction and handling of some issues\", \"[how] to decide when an issue can be closed\", \"how [companies] could help support open source projects [...]?\"\n\nPropose other agenda topics which can be added to this list.","createdAt":"2020-04-07T04:36:54Z","updatedAt":"2020-04-14T21:48:47Z","closedAt":null,"labels":[{"name":"meeting","color":"009800"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}},{"label":{"name":"meeting","color":"009800"},"issue":{"owner":"expressjs","repo":"discussions","number":120,"isPullRequest":false,"url":"https://github.com/expressjs/discussions/issues/120","state":"OPEN","title":"Express TC Meeting 04-22-2020","description":"Who\nThe entire community is welcome to tune in and observe the meeting live at the time below. The following people are listed here as explicit invitees to get an email notification about the upcoming meeting:\nInvited:\n\n@expressjs/express-tc\n@expressjs/triagers\n\nWhen\nApr 22, 2020 - 23:30 UTC \nWhere\nZoom, broadcasting on YouTube Live\n\nViewers: TBD\nParticipants: https://zoom.us/j/305917849\n\nAgenda\n\nDiscussion (maybe decision?) on where to keep org-wide documents (charter, coc, etc.)\nDiscussion (maybe decision?) on where to keep personal lists for both org-wide (triagers, TC members) and repo-specific (committers, project captians)\nExpress 4.18/5.0 status, blockers, next steps, etc.\nTriager discussion time(?)\n\nPropose other agenda topics which can be added to this list.","createdAt":"2020-04-15T02:30:45Z","updatedAt":"2020-04-17T15:59:57Z","closedAt":null,"labels":[{"name":"meeting","color":"009800"}],"assignee":null,"author":{"login":"dougwilson","avatarUrl":"https://avatars3.githubusercontent.com/u/67512?v=4","url":"https://github.com/dougwilson"}},"project":{"name":"expressjs/discussions","repo":"expressjs/discussions","repoOwner":"expressjs","repoName":"discussions","repoBranch":"master","repoDirectory":"/","packageName":null}}]}
